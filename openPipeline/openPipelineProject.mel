/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: openPipeline
''    Author:  
''    Last Updated: May 12, 2008
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/data_management/4450.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//
// openPipeline Project Functions
//

//###########################################
// Name: openPipelineProjectUI
// Description: Opens the oP Project UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineProjectUI()
{
	global string $openPipeline_projectFilePath;
	global string $openPipeline_scriptPath;
	string $projList[] = openPipelineGetProjectList();
	int $i=0;
	string $windowExists = `window -q -exists openPipelineProjUI`;
	string $dialogExists = `window -q -exists openPipelineProjDialog`;
	if ($windowExists == 1)
	{
		deleteUI openPipelineProjUI;
	}
	if ($dialogExists == 1)
	{
		deleteUI openPipelineProjDialog;
	}
	
	string $projWindow = `window  -w 550 -h 460 -sizeable 0 -mxb 0 -rtf 0 -title ("openPipeline - Project  Manager ") openPipelineProjUI`;
	
	columnLayout -co "left" 10 -rs 10;
	    rowLayout -nc 2 -cw2 430 110;
		    columnLayout -w 430;
			    rowLayout -nc 2 -cw2 110 300  -ad2 1;
			        text -l "Script Location:" -w 110;
			        textField  -editable 0 -w 300 -tx $openPipeline_scriptPath;
				
			        setParent..;
			    rowLayout -nc 2 -cw2 110 300;
			        text -l "Project File Location:" -w 110;
			        textField -w 300 -editable 0 -tx $openPipeline_projectFilePath;
			        setParent..;
			    setParent..;
			button -l "Edit Locations..." -w 90 -h 45 -c "openPipelineSetup";
	        setParent..;
	    rowLayout -nc 2 -cw2 170 350;
	        columnLayout -rs 5;
	            textScrollList -h 210 -w 150 -sc "openPipelineProjectUISelection" op_projectList;
	            rowLayout -nc 2 -cw2 75 75;
    	            button -l "New..." -bgc .6 .8 .5 -c "openPipelineNewProject" -w 75 -ann "" op_projectNewButton; 
    			    button -l "Remove" -bgc .8 .3 .3 -en 0 -w 75 -c "openPipelineRemoveProject" -ann "" op_projectRemoveButton;
    			    setParent..; 
    	        button -l "Edit.." -bgc .5 .7 .7 -en 0 -w 150 -c "openPipelineEditProject" -ann "" op_projectEditButton;
    	        setParent..;
    	    columnLayout -rs 5 -co "left" 30;
    	        separator -style "none" -w 125 -h 5;
    	        text -l "Project Info" -fn "plainLabelFont" -al "left";
    	        scrollField -w 320 -h 250 -ww 1 -editable 0 op_projectInfoBox;
    	        setParent..;
    	    setParent..;
    	rowLayout -nc 2 -cw2 260 260 -cl2 "center" "center";
    	button -l "Refresh List" -w 260 -h 30 -c "openPipelineProjectUI";
        button -l "Close" -w 260 -h 30 -c "openPipelineCloseProjUI";        
        for ($i = 0; $i<size($projList);$i+=2)
        {
            textScrollList -e -a $projList[$i] op_projectList;
        }

	//setUITemplate -popTemplate;
	window -e -w 550 -h 460 openPipelineProjUI;
	showWindow;
}

//###########################################
// Name: openPipelineGetProjectsData
// Description: Returns the full data of all existing projects
// Input: none
// Returns: A string array with each entry containing the full data of a single project in XML
//###########################################
global proc string[] openPipelineGetProjectsData()
{
    string $topLevelTag = "openPipeline_project_list";
	string $projectTag = "project";
	string $projectsData[];
	string $projectsFile = openPipelineGetProjFile();
	int $i=0;
	if (`filetest -r $projectsFile`)
	{
	    string $xml[];
	    string $projList[];
	    $xml = openPipelineGetXmlAll($projectsFile);    
	    $projList = openPipelineGetXmlTop($xml,$topLevelTag);
	    $projectsData = openPipelineGetXmlSecondary($projList, $projectTag);    
    	//$projectsData = openPipelineGetXmlTop($projList, $projectTag);    
    }
    else
	{
		int $fileId = `fopen $projectsFile "w"`;
		if ($fileId)
			fclose $fileId;
		else
			error("Project File does not exist, could not be opened, or could not be created.");
	}
	return $projectsData;
}

//###########################################
// Name: openPipelineGetProjectsData
// Description: Returns the data for a single project in XML
// Input: projName - the name of the project to query (string)
// Returns: A string containing the full data of a project in XML
//###########################################
global proc string openPipelineGetSingleProjectXml(string $projName)
{
    string $projData[] = openPipelineGetProjectsData();
    string $returnString ="";
    int $found = 0;
    int $i = 0;
    while ((!$found) && ($i<size($projData)))
	{
	    string $currProjName = openPipelineGetXmlData($projData[$i],"name");
	    if ($currProjName == $projName)
	    {
	        $found=1;
	    }
	    $i++;
	}
	if ($found)
	{
	    $i--;
	    $returnString = $projData[$i];
	}
	return $returnString;
}

//###########################################
// Name: openPipelineGetProjectList
// Description: Returns the the names and paths of all existing projects
// Input: none
// Returns: A string array with even entries containing project names and odd entries containing their corresponding paths
//###########################################
global proc string[] openPipelineGetProjectList()
{
	string $projects[] = openPipelineGetProjectsData();
	string $projectsList[];

	    for($i=0; $i<size($projects); $i++)
	    {
	        string $currName = openPipelineGetXmlData($projects[$i], "name");
	        string $currPath = openPipelineGetXmlData($projects[$i], "path");
	        $projectsList[$i*2]=$currName;
	        $projectsList[$i*2+1]=$currPath;
	    }
	return $projectsList;
}

//###########################################
// Name: openPipelineCloseProjUI
// Description: Closes the Project UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineCloseProjUI()
{
	if (`window -q -exists openPipelineProjUI`)
		deleteUI openPipelineProjUI;
	if (`window -q -exists openPipelineProjDialog`)
		deleteUI openPipelineProjDialog;
}

//###########################################
// Name: openPipelineProjectUISelection
// Description: This proc is called whenever a project is selected in the Project UI. It queries and displays the appropriate info.
// Input: none
// Returns: none
//###########################################
global proc openPipelineProjectUISelection()
{
    button -e -en 1 op_projectEditButton; 
    button -e -en 1 op_projectRemoveButton;
    int $currProjIndex[] = `textScrollList -q -sii op_projectList`;
    string $data[] = openPipelineGetProjectsData();
    string $name = openPipelineGetXmlData($data[$currProjIndex[0]-1], "name");
    string $path = openPipelineGetXmlData($data[$currProjIndex[0]-1], "path");
    string $description = openPipelineGetXmlData($data[$currProjIndex[0]-1], "description");
    string $date = openPipelineGetXmlData($data[$currProjIndex[0]-1], "date");
    string $deadline = openPipelineGetXmlData($data[$currProjIndex[0]-1], "deadline");
    string $status = openPipelineGetXmlData($data[$currProjIndex[0]-1], "status");
    string $mastername = openPipelineGetXmlData($data[$currProjIndex[0]-1], "mastername");
    string $masterformat = openPipelineGetXmlData($data[$currProjIndex[0]-1], "masterformat");
    string $workshopname = openPipelineGetXmlData($data[$currProjIndex[0]-1], "workshopname");
    string $workshopformat = openPipelineGetXmlData($data[$currProjIndex[0]-1], "workshopformat");
    string $libraryFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "libraryfolder");
    string $shotsFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "scenesfolder");
    string $archiveFolder = openPipelineGetXmlData($data[$currProjIndex[0]-1], "archivefolder");
		
		if ($status=="")
			$status="1";
		string $statusStrings[] = {"inactive","active"};
		
    string $projectInfo = "Project Name: " + $name +"\n" + 
                          "Path: " + $path +"\n" +
                          "Description: " + $description +"\n" +
                          "Status: " + $statusStrings[int($status)]+"\n" +
                          "-------------------------------------\n" +
                          "Date Created: " + $date +"\n" +
                          "Deadline: " + $deadline +"\n" +
                          "-------------------------------------\n"+
                          "Master Files:\nname - " + $mastername + "\nformat - " +$masterformat +"\n" +
                          "Workshop Files:\nname - " + $workshopname + "\nformat - " +$workshopformat + "\n" +
                          "-------------------------------------\n"+
                          "Library Sub-folder:     " + $libraryFolder + "\n" +
                          "Shots Sub-folder:      " + $shotsFolder + "\n" +
                          "Archive Sub-folder:     " + $archiveFolder + "\n";
                          
    scrollField -e -tx $projectInfo op_projectInfoBox;
}

//###########################################
// Name: openPipelineEditProject
// Description: Opens the Edit Project Dialog
// Input: none
// Returns: none
//###########################################
global proc openPipelineEditProject()
{
	openPipelineProjDialogWindow(1);
}

//###########################################
// Name: openPipelineRemoveProject
// Description: Removes the currently selected project
// Input: none
// Returns: none
//###########################################
global proc openPipelineRemoveProject()
{	
	string $projNameGet[] = `textScrollList -q -si op_projectList`;
	string $remProjName = $projNameGet[0];
	string $messageText = "Are you sure you want to remove project "+ $remProjName + " ?";
	string $result = `confirmDialog -bgc .9 .9 .9 -title "Remove Project Confirm" -message $messageText
			-button "Yes" -button "Cancel" -defaultButton "Yes"
			-cancelButton "Cancel" -dismissString "Cancel"`;		
	if ($result == "Yes")
	{
	    string $projectsData[] = openPipelineGetProjectsData();
	    string $newProjectsData[];
	    int $i=0;
	    int $removed=0;
	    for ($project in $projectsData)
	    {
	        string $currProjName = openPipelineGetXmlData($project,"name");
	        if ($currProjName != $remProjName)
	        {
	            $newProjectsData[$i] = $project;   
	            $i++;
	        }
	        else
	        {
	            $removed =1;   
	        }
	    }
	if ($removed)
	    openPipelineRewriteProjFile($newProjectsData);
	else
	    {
	    confirmDialog -title "Project Not Found" -bgc .9 .9 .9 -message "Project was not found."
			-button "Ok" -defaultButton "Ok";
		openPipelineProjectUI;
		}
    }
}

//###########################################
// Name: openPipelineRewriteProjFile
// Description: Rewrites the project xml file with the data it is passed as a string array
// Input: A string array, with each entry containing the data of the project in an xml file
// Returns: none
//###########################################
global proc openPipelineRewriteProjFile(string $projList[])
{
	string $projFile = openPipelineGetProjFile();
	int $i=0;
	if (`filetest -w $projFile`)
	{
		int $fileId = `fopen $projFile "w"`;
		fprint $fileId "<!--This file is automatically generated by openPipeline. Edit at your own risk!-->\n";
		fprint $fileId "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
		fprint $fileId "<?xml-stylesheet type=\"text/xsl\" href=\"xsl/plStylesheet.xsl\"?>\n";
		fprint $fileId "<openPipeline_project_list>\n";
		for ($i=0;$i<size($projList);$i++)
		{
			fprint $fileId "    <project>\n";
			string $currData[] = stringToStringArray($projList[$i], ">");
			for ($j=0;$j<size($currData);$j+=2)
			{
			    $currLine = "       " + $currData[$j] + ">" + $currData[$j+1] + ">\n";
			    fprint $fileId $currLine;
			}
			fprint $fileId "    </project>\n";
		}
	    fprint $fileId "</openPipeline_project_list>\n";
		fclose $fileId;
	}else{ 
		error("Project File " + $projFile + " could not be found, or is not writable.");			
	}
	openPipelineUI();
}

//###########################################
// Name: openPipelineProjDialogWindow
// Description: Opens the Project Dialog Window. This is used either for creating a new project or editing an existing project.
// Input: mode - 0 for creating a new project, 1 for editing an existing project (int)
// Returns: none
//###########################################
global proc openPipelineProjDialogWindow(int $mode)
{
	string $windowExists = `window -q -exists openPipelineProjDialog`;
	if ($windowExists == 1)
	{
		deleteUI openPipelineProjDialog;
	}
	string $title_txt = "Create New Project";	
	string $accept_str = "openPipelineProjDialogCallback("+$mode+",\"\")";
	window -sizeable 0 -mxb 0 -rtf 0 openPipelineProjDialog;
		columnLayout -width 280 -rs 5 -co "both" 10; 
			rowLayout -nc 2 -cw2 220 120;
			    text -fn "boldLabelFont" -label "Project Name (max length: 22):" -align "left" -width 220;
			    textField -h 20 -width 120  op_projectNameField;
			    setParent..;
			separator -h 5 -st "out" -w 340;
			rowLayout -nc 2 -cw2 90 250;
			    text -fn "boldLabelFont" -label "Project Path:" -align "left" -width 90;
			    text -label "(folders which don't already exist will be created)" -align "left" -width 250;
			    setParent..;
			rowLayout -nc 2 -cw2 280 60;
			    textField -h 20 -width 280 op_projectPathField ;
			    button -label "Browse..." -c "fileBrowserDialog -m 4 -fc \"openPipelineSetProjDialogPath\" -an \"Find Location\" " -w 60;
			    setParent..;
			separator -h 5 -st "out" -w 340;
		    rowLayout -nc 2 -cw2 80 260;
			    text -fn "boldLabelFont" -label "Description:" -align "left" -width 80;
			    textField -h 20 -width 260  op_descriptionField ;
			    setParent..;
			  separator -h 5 -w 340 -style "out";
			rowLayout -nc 2 -cw2 100 240;
			    text -fn "boldLabelFont" -label "Project Status:" -align "left" -width 100;
			    optionMenu -w 160 op_projectStatus;
			    	menuItem -label "inactive";
            menuItem -label "active" ;
			    setParent..;
			    text -fn "smallPlainLabelFont" -label "(inactive projects won't appear in main openPipeline window)" -align "left" -width 340;
		    separator -h 5 -st "out" -w 340;
		    rowLayout -nc 4 -cw4 100 100 70 70;
		        text -fn "boldLabelFont" -label "Creation Date:" -align "left" -width 100;
		        textField -h 20 -width 70 op_projectCreationDate;
		        text -fn "boldLabelFont" -label "Deadline:" -align "left" -width 70;
				textField -h 20 -width 70 op_projectDeadline;
	            setParent..;
			
			separator -h 5 -w 340 -style "out";
			rowLayout -nc 2 -cw2 100 240;
			    text -fn "boldLabelFont" -label "Master Files:" -align "left" -width 100;
			    text -fn "smallPlainLabelFont" -label "(finalized versions with flattened references)" -align "left" -width 240;
			    setParent..;
			rowLayout -nc 4 -cw4 50 180 60 70;
			    text -fn "smallPlainLabelFont" -label "Name:" -align "left" -width 50 ;
			    textField -h 20 -w 130 op_projectMasterName;
			    text -fn "smallPlainLabelFont" -label "File Format:" -align "left" -width 60;
			    optionMenu -w 70 op_projectMasterFormat;
                     menuItem -label "mb";
                     menuItem -label "ma";
                setParent..;
            separator -h 5 -w 340 -style "out";
			rowLayout -nc 2 -cw2 130 210;
			    text -fn "boldLabelFont" -label "Workshop Files:" -align "left" -width 130;
			    text -fn "smallPlainLabelFont" -label "(preliminary and test versions)" -align "left" -width 210;
			    setParent..;
			rowLayout -nc 4 -cw4 50 180 60 70;
			    text -fn "smallPlainLabelFont" -label "Name:" -align "left" -width 50;
			    textField -h 20 -w 130 op_projectWorkshopName;
			    text -fn "smallPlainLabelFont" -label "File Format:" -align "left" -width 60;
			    optionMenu -w 70 op_projectWorkshopFormat;
                     menuItem -label "mb";
                     menuItem -label "ma";
                setParent..;
	        separator -h 5 -st "out" -w 340;
		    
			text -fn "boldLabelFont" -label "Sub-Folder Names:" -align "left" -width 200;
			rowLayout -nc 2 -cw2 240 100;
			    text -fn "smallPlainLabelFont" -label "Asset Library:" -align "left" -width 240;
			    textField -h 20  -width 100 op_projectLibraryLocation;
			    setParent..;
			rowLayout -nc 2 -cw2 240 100;
			    text -fn "smallPlainLabelFont" -label "Shot Library:" -align "left" -width 240;
			    textField -h 20 -width 100 op_projectShotLocation;
			    setParent..;
			rowLayout -nc 2 -cw2 240 100;
			    text -fn "smallPlainLabelFont" -label "Archive:" -align "left" -width 240;
			    textField -h 20 -width 100 op_projectArchiveLocation;
			    setParent..;
			separator -h 5 -w 340 -style "out";
			rowLayout -nc 2 -cw2 170 170;
				button -label "Accept" -w 170 opProjAcceptButton;
				button -label "Cancel" -w 170  -c "deleteUI openPipelineProjDialog";
				setParent..;
	
	//if creating new project, set fields to default values 
	if (!$mode)
	{
	    string $date = openPipelineGetDate();
	    textField -e -text $date op_projectCreationDate;
	    textField -e -text $date op_projectDeadline;
	    textField -e -text "lib" op_projectLibraryLocation;
	    textField -e -text "scenes" op_projectShotLocation;
	    textField -e -text "archive" op_projectArchiveLocation;
	    textField -e -text "master" op_projectMasterName;
	    textField -e -text "workshop" op_projectWorkshopName;
	    optionMenu -e -sl 2 op_projectStatus;
	}
	//if editing current project, set fields to current values
	else
	{
	    string $projNameGet[] = `textScrollList -q -si op_projectList`;
	    string $editProjName = $projNameGet[0];
	    $title_txt = "Editing Project \""+$editProjName+"\"";
	    $accept_str = "openPipelineProjDialogCallback("+$mode+",\""+$editProjName+"\")";
	    string $projXml = openPipelineGetSingleProjectXml($editProjName);
	    if (size($projXml))
	    {
	        string $curr_name = openPipelineGetXmlData($projXml,"name");
	        string $curr_path = openPipelineGetXmlData($projXml,"path");
	        string $curr_description = openPipelineGetXmlData($projXml,"description");
	        string $curr_status = openPipelineGetXmlData($projXml,"status");
	        string $curr_date = openPipelineGetXmlData($projXml,"date");
	        string $curr_deadline = openPipelineGetXmlData($projXml,"deadline");
	        string $curr_mastername = openPipelineGetXmlData($projXml,"mastername");
	        string $curr_masterformat = openPipelineGetXmlData($projXml,"masterformat");
	        string $curr_workshopname = openPipelineGetXmlData($projXml,"workshopname");
	        string $curr_workshopformat = openPipelineGetXmlData($projXml,"workshopformat");
	        string $curr_libraryFolder = openPipelineGetXmlData($projXml,"libraryfolder");
	        string $curr_shotsFolder = openPipelineGetXmlData($projXml,"scenesfolder");
            string $curr_archiveFolder = openPipelineGetXmlData($projXml,"archivefolder");
            textField -e -text $curr_name op_projectNameField;
            textField -e -text $curr_path op_projectPathField;
            textField -e -text $curr_description op_descriptionField;
            textField -e -text $curr_date op_projectCreationDate;
	        textField -e -text $curr_deadline op_projectDeadline;      
	        textField -e -ed 0 -text $curr_libraryFolder op_projectLibraryLocation;
	        textField -e -ed 0 -text $curr_shotsFolder op_projectShotLocation;
	        textField -e -ed 0 -text $curr_archiveFolder op_projectArchiveLocation;
	        textField -e -ed 0 -text $curr_mastername op_projectMasterName;
	        optionMenu -e -en 0 -v $curr_masterformat op_projectMasterFormat;
	        textField -e -ed 0 -text $curr_workshopname op_projectWorkshopName;
	        optionMenu -e -en 0 -v $curr_workshopformat op_projectWorkshopFormat;  
	        if ($curr_status=="")
	        	$curr_status="1";
	        optionMenu -e -sl (int($curr_status)+1) op_projectStatus;   
	        workspace -dir $curr_path;
	    }
	}
	button -e -c $accept_str opProjAcceptButton;
	window  -e -w 380 -h 590 -title $title_txt openPipelineProjDialog;
	showWindow;
}

//###########################################
// Name: openPipelineProjDialogCallback
// Description: Performs the actions specified by the project dialog box
// Input: mode - 0 for creating a new project, 1 for editing an existing project (int)
//				editProjName - the new project name (if in edit mode) (string)
// Returns: none
//###########################################
global proc openPipelineProjDialogCallback(int $mode, string $editProjName)
{
	string $projData[] = openPipelineGetProjectsData();
	string $newName = strip(`textField -q -tx op_projectNameField`);
	string $newPath = strip(`textField -q -tx op_projectPathField`);	
	string $newDescription = strip(`textField -q -tx op_descriptionField`);
	string $newDate = strip(`textField -q -tx op_projectCreationDate`);
	string $newDeadline = strip(`textField -q -tx op_projectDeadline`);
	int $newStatus = `optionMenu -q -sl op_projectStatus`;
	$newStatus--; //convert from 1-based to 0-based
	string $newMasterName = strip(`textField -q -tx op_projectMasterName`);
	string $newMasterFormat = strip(`optionMenu -q -v op_projectMasterFormat`);
	string $newWorkshopName = strip(`textField -q -tx op_projectWorkshopName`);
	string $newWorkshopFormat = strip(`optionMenu -q -v op_projectWorkshopFormat`);
	string $newLibraryLocation = strip(`textField -q -tx op_projectLibraryLocation`);
	string $newShotLocation = strip(`textField -q -tx op_projectShotLocation`);
	string $newArchiveLocation = strip(`textField -q -tx op_projectArchiveLocation`);
	
	//input validation
	string $error = "";
	string $error_verb[] = {"created","edited"};
	
	if (size($newName)>22)
	    $error += "Project name cannot exceed 22 characters.\n";
	if (size($newMasterName)>18)
	    $error += "Master name cannot exceed 18 characters.\n";
    if (size($newWorkshopName)>18)
	    $error += "Workshop name cannot exceed 18 characters.\n";
	if (size($newLibraryLocation)>22)
	    $error += "Library sub-folder name cannot exceed 22 characters.\n";
	if (size($newShotLocation)>22)
	    $error += "Shot sub-folder name cannot exceed 22 characters.\n";
	if (size($newArchiveLocation)>22)
	    $error += "Archive sub-folder name cannot exceed 22 characters.\n";
	if (size($newDate)>18)
	    $error += "Date cannot exceed 18 characters.\n";
	if (size($newDeadline)>18)
	    $error += "Deadline exceeds 18 characters.\n";
	if (size($newDescription)>250)
	    $error += "Description exceeds 250 characters.\n";
	
	if (!isValidString($newName,"([a-zA-Z0-9_])*"))
	    $error += "Name is not valid (remove spaces and special characters ).\n";
	if (!isValidString($newMasterName,"([a-zA-Z0-9_])*"))
	    $error += "Master name is not valid (remove spaces and special characters ).\n";
	if (!isValidString($newWorkshopName,"([a-zA-Z0-9_])*"))
	    $error += "Workshop name is not valid (remove spaces and special characters ).\n";
	if (!isValidString($newLibraryLocation,"([a-zA-Z0-9_])*"))
	    $error += "Library sub-folder is not valid (remove spaces and special characters ).\n";
	if (!isValidString($newShotLocation,"([a-zA-Z0-9_])*"))
	    $error += "Location sub-folder is not valid (remove spaces and special characters ).\n";
	if (!isValidString($newArchiveLocation,"([a-zA-Z0-9_])*"))
	    $error += "Archive sub-folder is not valid (remove spaces and special characters ).\n";
	if (($newLibraryLocation==$newArchiveLocation)||($newLibraryLocation==$newShotLocation)||($newShotLocation==$newArchiveLocation))
	    $error += "Sub-folders (asset library, shot library and archive) must have unique names.\n";

	if (!`filetest -d $newPath`)
		{
			if (!`sysFile -md $newPath`)
				{
				$error += "Path is invalid. It does not exist and could not be created.\n";
				}
		}
	
	int $i=0;
    int $found=0;
    string $currProjName;
    while ((!$found) && ($i<size($projData)))
        {
        $currProjName = openPipelineGetXmlData($projData[$i],"name");
        if (($newName==$currProjName)&&($currProjName != $editProjName))
            {
        	    $found=1;
        	}
            $i++;
        }        
	if ($found)
	{
	    $error+="Name already exists. Please try a different name.";   
	}
	//end of input validation

	//if input is valid
	if (size($error)==0)
	{
    	string $newLine = "<name>" + $newName + "</name>" +
    	                  "<path>" + $newPath + "</path>" +
    	                  "<description>" + $newDescription + "</description>" +
    	                  "<date>" + $newDate + "</date>" +
    	                  "<deadline>" + $newDeadline + "</deadline>" +
    	                  "<status>" + $newStatus + "</status>" +
    	                  "<mastername>" + $newMasterName + "</mastername>" +
    	                  "<masterformat>" + $newMasterFormat + "</masterformat>" +
    	                  "<workshopname>" + $newWorkshopName + "</workshopname>" +
    	                  "<workshopformat>" + $newWorkshopFormat + "</workshopformat>" +
    	                  "<libraryfolder>" + $newLibraryLocation + "</libraryfolder>" +
    	                  "<scenesfolder>" + $newShotLocation + "</scenesfolder>" +
    	                  "<archivefolder>" + $newArchiveLocation + "</archivefolder>";
    	int $index;
    	if (!$mode)
    	    $index = size($projData);
    	else
    	{
        	int $i=0;
    	    int $found=0;
        	while ((!$found) && ($i<size($projData)))
        	    {
        	        string $currProjName = openPipelineGetXmlData($projData[$i],"name");
        	        if ($currProjName == $editProjName)
        	        {
        	            $found=1;
        	        }
        	        $i++;
    	    }
    	    $index = $i-1;        
    	}
    	$projData[$index] = $newLine;
    	openPipelineRewriteProjFile($projData);
	}
	//if input isn't valid
	else
	{
	    string $error_msg = "Project could not be "+$error_verb[$mode]+" because:\n\n"+$error;
	    confirmDialog -title "Project Error" -bgc .9 .9 .9 -message $error_msg -button "Ok" -defaultButton "Ok";
	}
}

//###########################################
// Name: openPipelineSetProjDialogPath
// Description: This proc is called by the file browser dialog.  It sets the appropriate text field to the path the user has chosen.
// Input: path - the path chosen by the user (string)
//				type - not used (string)
// Returns: none
//###########################################
global proc openPipelineSetProjDialogPath(string $path, string $type)
{
	textField -e -tx $path op_projectPathField;	
}

//###########################################
// Name: openPipelineSetProjLocationDialogPath
// Description: This proc is called by the file browser dialog.  It sets the appropriate text field to the path the user has chosen.
// Input: path - the path chosen by the user (string)
//				type - not used (string)
// Returns: none
//###########################################
global proc openPipelineSetProjLocationDialogPath(string $path, string $type)
{
	textField -e -tx $path op_projLocationField;
}

//###########################################
// Name: openPipelineNewProject
// Description: Opens the New Project Dialog
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewProject()
{
	openPipelineProjDialogWindow(0);
}

//###########################################
// Name: openPipelineGetProjFile
// Description: Returns the full path of the Project File
// Input: none
// Returns: The full path of the Project File (string)
//###########################################
global proc string openPipelineGetProjFile()
{
	global string $openPipeline_projectFilePath;
	global string $openPipeline_projList;
	return $openPipeline_projectFilePath+$openPipeline_projList;
}
