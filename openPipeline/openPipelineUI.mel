/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: openPipeline
''    Author:  
''    Last Updated: May 12, 2008
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/data_management/4450.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/
//
// openPipeline GUI functions
//

//###########################################
// Name: openPipelineUI
// Description: Builds the main oP UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineUI()
{
	global string $openPipeline_scriptPath;
	global string $openPipeline_iconFilename;
	global string $openPipeline_name;
	global string $openPipeline_version;
	global string $openPipeline_userName;
	global string $openPipeline_defaultPreviewFilename;
	global string $openPipeline_noPreviewFilename;
	global string $openPipeline_previewFilename;
	
	//set platform-specific UI settings
	string $mbString;
	int $mbInt;
	int $windowHeight;
	int $infoHeight;
	int $shotInfoHeight;
	//windows
	if ((`about -os`=="nt")||(`about -os`=="win64"))
	{
		$mbString = "left";
		$mbInt = 1;
		$windowHeight = 750;
		$infoHeight = 190;
		$shotInfoHeight = 66;
	}
	//mac
	else
	{
		$mbString = "right";
		$mbInt = 3;
		$windowHeight = 780;
		$infoHeight = 130;
		$shotInfoHeight = 82;
	}
	//set annotation strings
	string $anno_assetList=("Double-click to edit Asset. Hold " +$mbString+" mouse button for more options.");
	string $anno_componentList="Double-click to edit Component. Hold down " +$mbString+" mouse button for more options.";
	string $anno_shotList="Double-click to Edit Shot. Hold down " +$mbString+" mouse button for more options.";	
	string $anno_projectList="Select from the available Projects.";
	string $anno_projectManager="Open the Project Manager, where you can add or remove Projects.";
	string $anno_saveWorkshop="Save a workshop file for the current Asset/Shot/Component.";
	string $anno_master="Save a master file for the current Asset/Shot/Component.";
	string $anno_revive="Revive an old version of the current Asset/Shot/Component.";
	string $anno_closeFile="Close the currently open file.";
	string $anno_assetTypeList="Choose Asset Type(s). Hold Shift of Ctrl for multiple selection.";
	string $anno_newAssetType="Create a new Asset Type";
	string $anno_removeAssetType="Remove the selected Asset Type(s) from the inventory.";
	string $anno_archive="Archive old workshops and versions.";
	string $anno_newAsset="Create a new Asset for the selected Asset Type.";
	string $anno_removeAsset="Remove the selected Asset from the inventory.";
	string $anno_newComponent="Create a new Component for the selected Asset.";
	string $anno_removeComponent="Remove the selected Component from the inventory.";
	string $anno_newShot="Create a new Shot.";
	string $anno_removeShot="Remove the selected Shot.";
	string $anno_shotAssetList="Choose a mastered Asset to import or reference into the current scene.";
	string $anno_close="Close openPipeline.";
	string $anno_editAsset="Open the Asset for editing.";
	string $anno_viewAsset="Open the master file for the Asset.";
	string $anno_importAssetWorkshop="Import the Asset's latest workshop file into the current scene.";
	string $anno_importAssetMaster="Import the Asset's master file into the current scene.";
	string $anno_referenceAssetWorkshop="Reference the Asset's latest workshop file into the current scene.";
	string $anno_referenceAssetMaster="Reference the Asset's master file into the current scene.";
	string $anno_editComponent="Open the Component for editing.";
	string $anno_viewComponent="Open the master file for the Component.";
	string $anno_importComponentWorkshop="Import the Component's latest workshop file into the current scene.";
	string $anno_importComponentMaster="Import the Component's master file into the current scene.";
	string $anno_referenceComponentWorkshop="Reference the Component's latest workshop file into the current scene.";
	string $anno_referenceComponentMaster="Reference the Component's master file into the current scene.";
	string $anno_editShot="Open the Shot for editing.";
	string $anno_viewShot="Open the master file for the Shot.";
	string $anno_importShotWorkshop="Import the Shot's latest workshop file into the current scene.";
	string $anno_importShotMaster="Import the Shot's master file into the current scene.";
	string $anno_referenceShotWorkshop="Reference the Shot's latest workshop file into the current scene.";
	string $anno_referenceShotMaster="Reference the Shot's master file into the current scene.";
	string $anno_sequenceList="Choose a Sequence.";
	string $anno_newSequence="Create a new Sequence";
	string $anno_removeSequence="Remove the selected Sequence from the inventory.";
	string $anno_editShotComponent="Open the Component for editing.";
	string $anno_viewShotComponent="Open the master file for the Component.";
	string $anno_importShotComponentWorkshop="Import the Component's latest workshop file into the current scene.";
	string $anno_importShotComponentMaster="Import the Component's master file into the current scene.";
	string $anno_referenceShotComponentWorkshop="Reference the Component's latest workshop file into the current scene.";
	string $anno_referenceShotComponentMaster="Reference the Component's master file into the current scene.";
	string $anno_shotComponentList="Double-click to edit Component. Hold down " +$mbString+" mouse button for more options.";
	string $anno_newShotComponent="Create a new Component for the selected Asset.";
	string $anno_removeShotComponent="Remove the selected Component from the inventory.";
	//if optionVars for currently open file don't exist, create them
	if (!`optionVar -ex "op_currOpenPath"`)
		optionVar -sv "op_currOpenPath" "";
	if (!`optionVar -ex "op_currOpenType"`)
		optionVar -sv "op_currOpenType" "";
	if (!`optionVar -ex "op_currOpenCategory"`)
		optionVar -sv "op_currOpenCategory" "";
	if (!`optionVar -ex "op_currOpenVersion"`)
		optionVar -iv "op_currOpenVersion" 0;
	optionVar -iv "op_currTab" 1;		
	//get list of existing projects
	string $projList[] = openPipelineGetProjectsData();
	string $validProjList[];
	int $validProjects = 0;
	//check for projects with non-existing locations
	int $numProjects = size($projList);
	for($i=0; $i<$numProjects; $i++)
	{
		string $temp_projName = openPipelineGetXmlData($projList[$i],"name");
		string $temp_projPath = openPipelineGetXmlData($projList[$i],"path");
		string $temp_projStatus = openPipelineGetXmlData($projList[$i],"status");
		if ($temp_projStatus =="")
			$temp_projStatus = "1";
		if (int($temp_projStatus))  //if project is active
		{
			if (`filetest -d $temp_projPath`) //check if project path exists
			{
				$validProjList[$validProjects] = $projList[$i];
				$validProjects++;	
		  }
		  else
		  {
		  	string $msg = "Folder \""+$temp_projPath+"\" could not be found.\nIn order to work on project \""+$temp_projName+ "\" please edit the location of this project using the Project Manager.";
		    confirmDialog -title "openPipeline: Project Folder Not Found" -bgc .9 .9 .9 -message $msg -button "Ok" -defaultButton "Ok";	        
		  }
		}
	}
	//if at least one valid and active project exists
	if ($validProjects)
	{
		string $windowExists = `window -q -exists openPipelineUI`;
		if ($windowExists == 1)
		{
			deleteUI openPipelineUI;
		}
	
	//window setup
	string $window = `window -w 410 -h 650 -mxb 0 -rtf 0 -menuBar true 
		-title ($openPipeline_name + " " + $openPipeline_version) openPipelineUI`;

	// menus (more can go here)
 	menu -label "Maya Tools" -parent $window;
 		menuItem -label "Maya Reference Editor" -command "ReferenceEditor";
 		menuItem -label "Maya Project Manager" -command "projectSetup 2";

 	menu -label "Utilities" -parent $window;
 		menuItem -label "Update Tree Padding" -command openPipelineUtilityUpdatePadding;
 		menuItem -label "Moves Shots under Temp Sequence" -command openPipelineUtilityUpdateSceneStructure;

 	menu -label "Help" -helpMenu true -parent $window;
 		menuItem -label "About openPipeline..." -command openPipelineAboutDialog;
 		menuItem -label "Help..." -command openPipelineHelpLaunch;
	
	columnLayout -co "left" 10;
		separator -style "none" -h 5;
		//--------------------------------------------
		//columnLayout for basic info on the top of UI
		//including Login User, Proj Name, Proj Path
		//
		columnLayout infoUI;
		rowLayout -nc 2 -cal 1 "right" -cw2 100 290 -cal 2 "right";
			text -label "Login User : " -w 100;
			textField -text $openPipeline_userName -editable false -w 290 userName;
			setParent..;
		rowLayout -numberOfColumns 3 -cal 1 "right" -cw3 100 190 100;
			text -label "Project Name : " -w 100;
			optionMenu -cc "openPipelineProjSelected 1" -ann $anno_projectList -w 190 projNameMenu;
		
	int $numProjects = size($validProjList);
	for($i=0; $i<$numProjects; $i++)
	{
		string $temp_projName = openPipelineGetXmlData($validProjList[$i],"name");
		string $temp_projPath = openPipelineGetXmlData($validProjList[$i],"path");
		if (`filetest -d $temp_projPath`)
		{	
			menuItem -label $temp_projName;
		}
	}
  int $currProj = 1;
  if (`optionVar -ex "op_currProject"`)
  {
  	$currProj = `optionVar -q "op_currProject"`;
   	if (($currProj>`optionMenu -q -ni projNameMenu`)||($currProj<1))
   	{
   		$currProj = 1;
   		optionVar -iv "op_currProject" 1;
    }
  }
  else
  	optionVar -iv "op_currProject" 1;
    
			optionMenu -e -sl $currProj projNameMenu;
			button -label "Project Manager..." -c "openPipelineProjectUI" -ann $anno_projectManager -w 100 -h 30 projManagerButton;
			setParent..;
		rowLayout -cal 1 "right" -nc 2 -cw2 100 290;
			text -label "Project Path : " -w 100;
			textField -editable false -w 290 projPath;
			setParent..;
		separator -style "none" -w 410 -h 10;
		setParent..;
  string $iconFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_iconFilename;
  image -h 50 -w 415 -i $iconFile -bgc 0 0 0 op_iconImage;
  separator -style "none" -w 410 -h 15;
	//
	//end of columnLayout infoUI
	//--------------------------
				 		
	//tab layout for switching btw Currently Open, Asset and Shots Inventory
	tabLayout -scr 0 -innerMarginWidth 0 -innerMarginHeight 0 -sc "openPipelineUpdateWorkingTab" op_mainTabLayout;

	//-------------------------
	//"Currently Open" Tab
	//this is the first column that will be attached to the tab layout
	
		columnLayout -w 410 op_currOpenColumnLayout;
			separator -style "none" -w 410 -h 10;
			separator -style "double" -w 410;
			text -fn "boldLabelFont" -w 400  -label "CURRENTLY OPEN:"  -al "left" op_currOpenTitle;
			separator -style "none" -height 5;
			text -fn "smallBoldLabelFont"   -w 290  -label " "  -al "left" op_currOpenHeading;
					
			text -fn "smallBoldLabelFont" -w 370 -label " " -al "left" op_currOpenHeadingVersion;	
			separator -style "none" -height 5;

			separator -style "double" -w 410;
			separator -style "none"  -h 5;
			rowLayout -numberOfColumns 2 -cw2 180 230;
				columnLayout -rs 5 -w 180;
					text -fn "smallBoldLabelFont" -label "Actions" -w 100 -al "left";
					button -l "Save Workshop..." -w 164 -bgc .8 .6 .5 -c "openPipelineSaveWorkshopGUI" -ann $anno_saveWorkshop op_saveWorkshopButton;
					button -l "MASTER..." -w 164 -bgc .9 .7 .4 -c "openPipelineSaveMasterFileGUI" -ann $anno_master op_masterButton;
					button -l "Revive"  -bgc .5 .7 .7 -w 164 -c "openPipelineReviveGUI" -ann $anno_revive op_reviveButton;
					button -l "Close"  -bgc .8 .8 .8 -w 164 -c "openPipelineCloseFile" -ann $anno_closeFile op_closeButton;
					setParent..;
				columnLayout -rs 5 -w 230;
					text -fn "smallBoldLabelFont" -label "History" -w 180 -al "left";
					scrollField -w 220 -h 103 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_currentAssetNoteField;
					setParent..;
				setParent ..;
			separator -h 12 -style "none";
			rowLayout -numberOfColumns 2 -cw2 180 230;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Preview" -w 164 -al "center";
					image -h 105 -w 164 -i ($openPipeline_scriptPath+"openPipeline/"+$openPipeline_defaultPreviewFilename) -bgc 0 0 0 op_currPreviewImage;
					button -l "Take Snapshot" -w 164 -c "openPipelineTakeSnapshot" op_snapshotButton;
					setParent..;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Notes" -w 220 -al "center";
					scrollField -w 220 -h 105 -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" -kpc "button -e -en 1 op_saveNoteButton" op_currNoteField;
					rowLayout -numberOfColumns 2 -w 220 -cw2 110 110 -cl2 "center" "center" ;
						button -w 110 -h 20 -l "Clear" -c "openPipelineClearNote" op_clearNoteButton;
						button -w 110 -h 20 -l "Save" -c "openPipelineSaveNote" -en 0 op_saveNoteButton;
						setParent..;
					setParent..;
				setParent..;
			separator -style "none" -w 5 -h 57;
			setParent..;
		//"Asset Inventory" Tab
		//this is the second column that will be attached to the tab layout
		columnLayout op_assetColumnLayout;
			separator -style "none" -w 410 -h 10;
			separator -style "double" -w 410;
			text -fn "boldLabelFont" -label "ASSET BROWSER" -w 410 -al "left";
			separator -style "double" -w 410;
			separator -style "none" -w 410 -h 5;
			rowLayout -numberOfColumns 3 -w 410 -cw3 135 135 135 -cl3 "right" "right" "right";
				columnLayout -w 120 -rs 0 -cal "center";
					text -l "Asset Types" -w 125 -fn "smallBoldLabelFont" -al "left";
					textScrollList -w 125 -h 119 -ams 1 -sc "openPipelineAssetTypeSelected 0" -fn "smallPlainLabelFont" -ann $anno_assetTypeList op_assetTypeScrollList;
					separator -style "none" -w 125 -h 5;
					rowLayout -numberOfColumns 2 -cw2 65 60;			
    				button -l "New..." -bgc .6 .8 .5 -w 65 -c "openPipelineNewAssetTypeUI" -ann $anno_newAssetType op_assetTypeNewButton; 
    				button -l "Delete" -bgc .8 .3 .3 -w 60 -c "openPipelineRemoveFolder type" -ann $anno_removeAssetType op_assetTypeRemoveButton;
						setParent..;	
					setParent ..;
				columnLayout -w 120 -rs 0 -cal "center";
					text -fn "smallBoldLabelFont" -l "Assets" -w 125 -al "left";
					menuBarLayout -bgc .9 .3 .3 -w 125 -h 175;
						menu -label "OPTIONS..." op_assetMenu;
						menuItem -label "Edit Asset" -subMenu 0 -command "openPipelineAssetAction workshop 0 open 0" -ann $anno_editAsset op_assetMenuEdit;
						menuItem -label "View Master" -subMenu 0 -command "openPipelineAssetAction master 0 open 0" -ann $anno_viewAsset op_assetMenuView;		
						menuItem -label "Import" -subMenu 1 -ann " " op_assetMenuImport;
							menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 import 0" -ann $anno_importAssetWorkshop op_assetMenuImportWorkshop;
							menuItem -label "Master" -command "openPipelineAssetAction master 0 import 0" -ann $anno_importAssetMaster op_assetMenuImportMaster;
							setParent -menu ..;
						menuItem -label "Reference" -subMenu 1 -ann " " op_assetMenuReference;
							menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 reference 0" -ann $anno_referenceAssetWorkshop op_assetMenuReferenceWorkshop;
							menuItem -label "Master" -command "openPipelineAssetAction master 0 reference 0" -ann $anno_referenceAssetMaster op_assetMenuReferenceMaster;
							setParent -menu ..;
						columnLayout;
							textScrollList -w 125 -h 100 -dcc "openPipelineAssetAction workshop 0 open 0" -sc "openPipelineAssetSelected 0" -fn "smallPlainLabelFont" -ann $anno_assetList op_assetScrollList;
							popupMenu -p op_assetScrollList -b $mbInt -mm 1 -pmc "openPipelineAssetSelected 1";	
							menuItem -label "Edit Asset" -command "openPipelineAssetAction workshop 0 open 0" -ann $anno_editAsset op_assetMenuEdit2;
							menuItem -label "View Master" -command "openPipelineAssetAction master 0 open 0" -ann $anno_viewAsset op_assetMenuView2;
							menuItem -label "Import" -subMenu 1 -ann " " op_assetMenuImport2;
								menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 import 0" -ann $anno_importAssetWorkshop op_assetMenuImportWorkshop2;
								menuItem -label "Master" -command "openPipelineAssetAction master 0 import 0" -ann $anno_importAssetMaster op_assetMenuImportMaster2;
								setParent -menu ..;
							menuItem -label "Reference" -subMenu 1 -ann " " op_assetMenuReference2;
								menuItem -label "Workshop" -command "openPipelineAssetAction workshop 0 reference 0" -ann $anno_referenceAssetWorkshop op_assetMenuReferenceWorkshop2;
								menuItem -label "Master" -command "openPipelineAssetAction master 0 reference 0" -ann $anno_referenceAssetMaster op_assetMenuReferenceMaster2;	
								setParent -menu ..;
							separator -style "none" -w 125 -h 5;
							rowLayout -numberOfColumns 3 -cw3 45 40 40;			
								button -l "New..." -bgc .6 .8 .5 -w 45 -c "openPipelineNewAssetUI" -ann $anno_newAsset op_assetNewButton; 
								button -l "Arch." -bgc .6 .7 .9 -w 40 -c "openPipelineArchiveDialog asset" -ann $anno_archive op_assetArchiveButton;
								button -l "Delete" -bgc .8 .3 .3 -w 40 -c "openPipelineRemoveFolder asset" -ann $anno_removeAsset op_assetRemoveButton;
								setParent..;	
							setParent ..;
						setParent..;
					setParent..;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Components" -w 125 -al "left";
					menuBarLayout -bgc .9 .3 .3 -w 125 -h 175;
						menu -label "OPTIONS..." op_componentMenu;
						menuItem -label "Edit Component" -subMenu 0 -command "openPipelineComponentAction workshop 0 open 0" -ann $anno_editComponent op_compMenuEdit;
						menuItem -label "View Master" -command "openPipelineComponentAction master 0 open 0" -ann $anno_viewComponent op_compMenuView;
						menuItem -label "Import" -subMenu 1 -ann " " op_compMenuImport;
							menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 import 0" -ann $anno_importComponentWorkshop op_compMenuImportWorkshop;
							menuItem -label "Master" -command "openPipelineComponentAction master 0 import 0" -ann $anno_importComponentMaster op_compMenuImportMaster;
							setParent -menu ..;
						menuItem -label "Reference" -subMenu 1 -ann " " op_compMenuReference;
							menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 reference 0" -ann $anno_referenceComponentWorkshop op_compMenuReferenceWorkshop;
							menuItem -label "Master" -command "openPipelineComponentAction master 0 reference 0" -ann $anno_referenceComponentMaster op_compMenuReferenceMaster;
							setParent -menu ..;
						columnLayout;
							textScrollList -w 125 -h 100 -en 0 -dcc "openPipelineComponentAction workshop 0 open 0" -sc "openPipelineComponentSelected" -fn "smallPlainLabelFont" -ann $anno_componentList op_componentScrollList;
							popupMenu -p op_componentScrollList -b $mbInt -mm 1 -pmc "openPipelineComponentSelected";
							menuItem -label "Edit Component" -subMenu 0 -command "openPipelineComponentAction workshop 0 open 0" -ann $anno_editComponent op_compMenuEdit2;
							menuItem -label "View Master" -command "openPipelineComponentAction master 0 open 0" -ann $anno_viewComponent op_compMenuView2;
							menuItem -label "Import" -subMenu 1 -ann " " op_compMenuImport2;
								menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 import 0" -ann $anno_importComponentWorkshop op_compMenuImportWorkshop2;
								menuItem -label "Master" -command "openPipelineComponentAction master 0 import 0" -ann $anno_importComponentMaster op_compMenuImportMaster2;
								setParent -menu ..;
							menuItem -label "Reference" -subMenu 1 -ann " " op_compMenuReference2;
								menuItem -label "Workshop" -command "openPipelineComponentAction workshop 0 reference 0" -ann $anno_referenceComponentWorkshop op_compMenuReferenceWorkshop2; 
								menuItem -label "Master" -command "openPipelineComponentAction master 0 reference 0" -ann $anno_referenceComponentMaster op_compMenuReferenceMaster2;	
								setParent -menu ..;
							separator -style "none" -w 125 -h 5;
							rowLayout -numberOfColumns 3 -cw3 45 40 40;			
								button -l "New..." -bgc .6 .8 .5 -w 45 -c "openPipelineNewAssetComponentUI" -ann $anno_newComponent op_componentNewButton; 
								button -l "Arch." -bgc .6 .7 .9 -w 40 -c "openPipelineArchiveDialog component" -ann $anno_archive op_componentArchiveButton;
								button -l "Delete" -bgc .8 .3 .3 -w 40 -c "openPipelineRemoveFolder component" -ann $anno_removeComponent op_componentRemoveButton;	
								setParent..;	
							setParent ..;
						setParent..;
					setParent..;
				setParent ..;
			separator -style "none" -w 5 -h 10;
			rowLayout -numberOfColumns 2 -w 395 -cw2 170 225  -cl2 "center" "center";
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Preview" -w 164 -al "center";
					image -h 105 -w 164 -i ($openPipeline_scriptPath+"openPipeline/defaultPreview.jpg") -bgc 0 0 0 op_assetPreviewImage;
					separator -style "none" -height 5;
					text -fn "smallBoldLabelFont" -l "Notes" -w 164 -al "center";
					scrollField -w 164 -h ($infoHeight/3) -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_assetNoteField;
					setParent ..;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "History" -w 225 -al "center";
					scrollField -w 225 -h $infoHeight -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_commentField;
					setParent ..;
				setParent..;
			separator -style "none" -w 5 -h 10;
			setParent ..;		
	
		//------------------------
		////"Shot Inventory" Tab
		//this is the third column that will be attached to the tab layout
		//
		columnLayout op_shotColumnLayout;
			separator -style "none" -w 410 -h 10;
			separator -style "double" -w 410;
			text -fn "boldLabelFont" -label "SHOT BROWSER" -w 410 -al "left";
			separator -style "double" -w 410;
			separator -style "none" -w 10 -h 5;
			rowLayout -numberOfColumns 3 -w 410 -cw3 135 135 135 -cl3 "right" "right" "right";
				columnLayout -w 120 -rs 0 -cal "center";
					text -l "Sequence" -w 125 -fn "smallBoldLabelFont" -al "left";
					textScrollList -w 125 -h 119 -ams 0 -sc "openPipelineUpdateShotList 0" -fn "smallPlainLabelFont" -ann $anno_sequenceList op_sequenceScrollList;
					separator -style "none" -w 125 -h 5;
					rowLayout -numberOfColumns 2 -cw2 65 60;			
    				button -l "New..." -bgc .6 .8 .5 -w 65 -c "openPipelineNewSequenceUI" -ann $anno_newSequence op_assetTypeNewButton; 
    				button -l "Delete" -bgc .8 .3 .3 -w 60 -c "openPipelineRemoveFolder sequence" -ann $anno_removeSequence op_sequenceRemoveButton;
						setParent..;	
					setParent ..;	
				columnLayout;	
					text -fn "smallBoldLabelFont" -l "Shot" -w 120 -al "left"   ;
					menuBarLayout -bgc .9 .3 .3 -w 120 -h 175 ;
						menu -label "OPTIONS..." op_shotMenu;
						menuItem -label "Edit Shot" -subMenu 0 -command "openPipelineShotAction workshop 0 open 0" -ann $anno_editShot op_shotMenuEdit;
						menuItem -label "View Master" -subMenu 0 -command "openPipelineShotAction master 0 open 0" -ann $anno_viewShot op_shotMenuView;
						menuItem -label "Import" -subMenu 1 -ann " " op_shotMenuImport;
							menuItem -label "Workshop" -command "openPipelineShotAction workshop 0 import 0" -ann $anno_importShotWorkshop op_shotMenuImportWorkshop;
							menuItem -label "Master" -command "openPipelineShotAction master 0 import 0" -ann $anno_importShotMaster op_shotMenuImportMaster;
							setParent -menu ..;
						menuItem -label "Reference" -subMenu 1 -ann " " op_shotMenuReference;
							menuItem -label "Workshop" -command "openPipelineShotAction workshop 0 reference 0" -ann $anno_referenceShotWorkshop op_shotMenuReferenceWorkshop;
							menuItem -label "Master" -command "openPipelineShotAction master 0 reference 0" -ann $anno_referenceShotMaster op_shotMenuReferenceMaster;
							setParent -menu ..;
						columnLayout;
							textScrollList -w 125 -h 100 -dcc "openPipelineShotAction workshop 0 open 0" -sc "openPipelineShotSelected 0" -fn "smallPlainLabelFont" -ann $anno_shotList op_shotScrollList;
							popupMenu -p op_shotScrollList -b $mbInt -mm 1 -pmc "openPipelineShotSelected 0";
							menuItem -label "Edit Shot" -command "openPipelineShotAction workshop 0 open 0" -ann $anno_editShot op_shotMenuEdit2;
							menuItem -label "View Master" -command "openPipelineShotAction master 0 open 0" -ann $anno_viewShot op_shotMenuView2;
							menuItem -label "Import" -subMenu 1 -ann " " op_shotMenuImport2;
								menuItem -label "Workshop" -command "openPipelineShotAction workshop 0 import 0" -ann $anno_importShotWorkshop op_shotMenuImportWorkshop2;
								menuItem -label "Master" -command "openPipelineShotAction master 0 import 0" -ann $anno_importShotMaster op_shotMenuImportMaster2;
								setParent -menu ..;
							menuItem -label "Reference" -subMenu 1 -ann " " op_shotMenuReference2;
								menuItem -label "Workshop" -command "openPipelineShotAction workshop 0 reference 0" -ann $anno_referenceShotWorkshop op_shotMenuReferenceWorkshop2;
								menuItem -label "Master" -command "openPipelineShotAction master 0 reference 0" -ann $anno_referenceShotMaster op_shotMenuReferenceMaster2;	
								setParent -menu ..;
							separator -style "none" -w 125 -h 5;
							rowLayout -numberOfColumns 3 -cw3 45 40 40;
								button -l "New..." -bgc .6 .8 .5 -w 45 -c "openPipelineNewShotUI" -ann $anno_newShot op_shotNewButton; 
								button -l "Arch." -bgc .6 .7 .9 -w 40 -c "openPipelineArchiveDialog shot" -ann $anno_archive op_shotArchiveButton;
								button -l "Delete" -bgc .8 .3 .3 -w 40 -c "openPipelineRemoveFolder shot" -ann $anno_removeShot op_shotRemoveButton;
								setParent..;	
							setParent..;
						setParent..;
					setParent..;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Components" -w 125 -al "left";
					menuBarLayout -bgc .9 .3 .3 -w 125 -h 175;
						menu -label "OPTIONS..." op_shotComponentMenu;
						menuItem -label "Edit Shot Component" -subMenu 0 -command "openPipelineShotComponentAction workshop 0 open 0" -ann $anno_editShotComponent op_shotcompMenuEdit;
						menuItem -label "View Master" -command "openPipelineShotComponentAction master 0 open 0" -ann $anno_viewShotComponent op_shotcompMenuView;
						menuItem -label "Import" -subMenu 1 -ann " " op_shotcompMenuImport;
							menuItem -label "Workshop" -command "openPipelineShotComponentAction workshop 0 import 0" -ann $anno_importShotComponentWorkshop op_shotcompMenuImportWorkshop;
							menuItem -label "Master" -command "openPipelineShotComponentAction master 0 import 0" -ann $anno_importShotComponentMaster op_shotcompMenuImportMaster;
							setParent -menu ..;
						menuItem -label "Reference" -subMenu 1 -ann " " op_shotcompMenuReference;
							menuItem -label "Workshop" -command "openPipelineShotComponentAction workshop 0 reference 0" -ann $anno_referenceShotComponentWorkshop op_shotcompMenuReferenceWorkshop;
							menuItem -label "Master" -command "openPipelineShotComponentAction master 0 reference 0" -ann $anno_referenceShotComponentMaster op_shotcompMenuReferenceMaster;
							setParent -menu ..;
						columnLayout;
							textScrollList -w 125 -h 100 -en 0 -dcc "openPipelineShotComponentAction workshop 0 open 0" -sc "openPipelineShotComponentSelected" -fn "smallPlainLabelFont" -ann $anno_shotComponentList op_shotComponentScrollList;
							popupMenu -p op_shotComponentScrollList -b $mbInt -mm 1 -pmc "openPipelineShotComponentSelected";
							menuItem -label "Edit Shot Component" -subMenu 0 -command "openPipelineShotComponentAction workshop 0 open 0" -ann $anno_editShotComponent op_shotcompMenuEdit2;
							menuItem -label "View Master" -command "openPipelineShotComponentAction master 0 open 0" -ann $anno_viewShotComponent op_shotcompMenuView2;
							menuItem -label "Import" -subMenu 1 -ann " " op_shotcompMenuImport2;
								menuItem -label "Workshop" -command "openPipelineShotComponentAction workshop 0 import 0" -ann $anno_importShotComponentWorkshop op_shotcompMenuImportWorkshop2;
								menuItem -label "Master" -command "openPipelineShotComponentAction master 0 import 0" -ann $anno_importShotComponentMaster op_shotcompMenuImportMaster2;
								setParent -menu ..;
							menuItem -label "Reference" -subMenu 1 -ann " " op_shotcompMenuReference2;
								menuItem -label "Workshop" -command "openPipelineShotComponentAction workshop 0 reference 0" -ann $anno_referenceShotComponentWorkshop op_shotcompMenuReferenceWorkshop2; 
								menuItem -label "Master" -command "openPipelineShotComponentAction master 0 reference 0" -ann $anno_referenceShotComponentMaster op_shotcompMenuReferenceMaster2;	
								setParent -menu ..;
							separator -style "none" -w 125 -h 5;
							rowLayout -numberOfColumns 3 -cw3 45 40 40;			
								button -l "New..." -bgc .6 .8 .5 -w 45 -c "openPipelineNewShotComponentUI" -ann $anno_newShotComponent op_shotComponentNewButton; 
								button -l "Arch." -bgc .6 .7 .9 -w 40 -c "openPipelineArchiveDialog shotComponent" -ann $anno_archive op_shotComponentArchiveButton;
								button -l "Delete" -bgc .8 .3 .3 -w 40 -c "openPipelineRemoveFolder shotComponent" -ann $anno_removeShotComponent op_shotComponentRemoveButton;	
								setParent..;	
							setParent ..;
						setParent..;
					setParent..;
				setParent..;
			separator -style "none" -w 10 -h 10;
			rowLayout -numberOfColumns 2 -w 395 -cw2 170 225 -cl2 "center" "center" ;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "Preview" -w 164 -al "center";
					image -h 105 -w 164 -i ($openPipeline_scriptPath+"openPipeline/"+$openPipeline_defaultPreviewFilename) -bgc 0 0 0 op_shotPreviewImage;
					separator -style "none" -height 5;
					text -fn "smallBoldLabelFont" -l "Notes" -w 164 -al "center";
					scrollField -w 164 -h ($infoHeight/3) -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_shotInfoField;
					setParent ..;
				columnLayout;
					text -fn "smallBoldLabelFont" -l "History" -w 225 -al "center";
					scrollField -w 225 -h $infoHeight -enable 1 -editable 0 -wordWrap 1 -font "smallPlainLabelFont" -text "" op_shotCommentField;
					setParent ..;
				setParent..;
			separator -style "none" -w 5 -h 10;	
			setParent..;
		setParent..;
			
		/*
				separator -style "double" -w 410;
				text -fn "boldLabelFont" -label "AVAILABLE ASSETS" -w 410 -al "left";
				separator -style "double" -w 410;
				separator -style "none" -w 10 -h 5;
				rowLayout -numberOfColumns 3 -w 410 -cw3 145 145 115;
					columnLayout -w 120 -rs 0 -cal "center";
						text -l "Asset Types" -w 135 -fn "smallBoldLabelFont" -al "left";
						textScrollList -w 135 -h 55 -ams 1 -sc "openPipelineShotAssetTypeSelected" -fn "smallPlainLabelFont" -ann $anno_assetTypeList op_shotAssetTypeList;
					setParent..;
					columnLayout -w 135 -rs 0 -cal "center";
						text -l "Assets" -w 135 -fn "smallBoldLabelFont" -al "left";
						textScrollList -w 135 -h 55 -sc "openPipelineShotAssetSelected" -fn "smallPlainLabelFont" -ams 0 -ann $anno_shotAssetList op_shotAssetList;
					setParent..;
					columnLayout -w 115 -rs 0 -cal "left";
							separator -style "none" -w 1 -h 15;
							button -l "Import" -w 110 -h 25 -bgc .6 .7 .7 -c "openPipelineShotAssetAction import" op_importToShotButton;
							button -l "Reference" -w 110 -h 25 -bgc .7 .6 .6 -c "openPipelineShotAssetAction reference" op_referenceToShotButton;
						setParent..;
					setParent..;
					separator -style "none" -w 5 -h 10;
				setParent..;
				
			setParent..;
*/
			//
			//end of Tab Layout
			//----------------------
	  			
			//columnLayout : Reresh UI
	columnLayout -cal "center" -cw 410 -cat "left" 2 refreshUIColumn;
		separator -style "none" -w 410 -h 10;
		frameLayout -labelVisible false -w 410 -h 20;
				//helpLine -w 395 op_helpLine;
			setParent..;
			
		separator -style "none" -w 125 -h 10;
				
			
		rowLayout -numberOfColumns 2 -h 30 -cw2 205 205 -cl2 "center" "center";
			button -h 30 -label "Refresh UI" -width 205 -command "openPipelineUI;";
			button -h 30 -label "Close" -width 205 -command "openPipelineCloseUI" -ann $anno_close;
			setParent..;
		setParent ..;
        
	//------------------------------------------
	//tabLayout editing, giving tabs diff names
	//
	tabLayout -edit -tabLabel op_assetColumnLayout "Asset Browser" -tabLabel op_shotColumnLayout "Shot Browser" -tabLabel op_currOpenColumnLayout "Currently Open" op_mainTabLayout;
		
		//
		//end of tabLayout editing
		//-----------------------

	// display final window
	
	window -e -w 450 -h $windowHeight openPipelineUI;
	
	openPipelineProjSelected(0);
	openPipelineUpdateCurrentlyOpen();
	
	showWindow $window;
	if (`window -q -exists openPipelineProjUI`)
		openPipelineProjectUI();
	}
	else
	{
	  //if NO projects exist, open Project Manager
		if (`window -q -exists openPipelineUI`)
		{
			deleteUI openPipelineUI;
		}
		optionVar -sv "op_currOpenPath" "";
		optionVar -sv "op_currOpenType" "";
		optionVar -sv "op_currOpenCategory" "";
		optionVar -iv "op_currOpenVersion" 0;
		openPipelineProjectUI();
	}
	if (`about -os`=="mac") //hack to correct ui bugs on mac
	{
		tabLayout -edit -sti 3  op_mainTabLayout;
		tabLayout -edit -sti 2  op_mainTabLayout;
		tabLayout -edit -sti 1  op_mainTabLayout;
	}
}

//###########################################
// Name: openPipelineCloseUI
// Description: Closes all oP-related windows
// Input: none
// Returns: none
//###########################################
global proc openPipelineCloseUI()
{
	if (`window -q -exists openPipelineUI`)
		deleteUI openPipelineUI;
	openPipelineRemoveSecondaryWindows();
	openPipelineCloseProjUI();
}

//###########################################
// Name: openPipelineUpdateCurrentlyOpen
// Description: Updates the "Currently Open" display
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateCurrentlyOpen()
{
	global string $openPipeline_scriptPath;
	global string $openPipeline_defaultPreviewFilename;
	global string $openPipeline_noPreviewFilename;
	global string $openPipeline_previewFilename;
	
	//get information about the currently open file
	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currType = `optionVar -q "op_currOpenType"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	int $currVersion = `optionVar -q "op_currOpenVersion"`;
    
	if ($currPath=="")  //if there is NO file currently open, clear all text and disable buttons
	{		
		openPipelineClearCurrentHistory();
		scrollField -e -tx "" op_currNoteField;
		image -e -i ($openPipeline_scriptPath+"openPipeline/"+$openPipeline_defaultPreviewFilename) -bgc 0 0 0 op_currPreviewImage;
		button -e -en 0 op_saveWorkshopButton;
		button -e -en 0 op_masterButton;
		button -e -en 0 op_reviveButton;
		button -e -en 0 op_closeButton;
		button -e -en 0 op_clearNoteButton;
		button -e -en 0 op_saveNoteButton;
		button -e -en 0 op_snapshotButton;
		text -e -label "none" op_currOpenHeading;
		text -e -l "      " -bgc .8 .8 .8 op_currOpenHeadingVersion;
		scrollField -e -text "" -editable 0 op_currNoteField;
	}
	else
	{ //if there IS a file currently open...
		
		//get the number of workshop versions for the currently open file

		string $wExt = `optionVar -q "op_workshopFormat"`;
		string $mExt = `optionVar -q "op_masterFormat"`;
		string $wName = `optionVar -q "op_workshopName"`;
		string $mName = `optionVar -q "op_masterName"`;
		string $workshop = ($currPath + $wName +"/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ("*_"+ $wName +"_*."+$wExt)`;
		$workshopFiles = sort($workshopFiles);
		int $numVersions = `size($workshopFiles)`;
		int $latestVersion = 0;
		if ($numVersions)
			$latestVersion = openPipelineGetVersionFromFile($workshopFiles[$numVersions-1]);
		int $reviveEnabled = 0;
		string $displayType;
    if ($currType=="workshop")
        $displayType = $wName;
    else if ($currType=="master")
        $displayType = $mName;
		
		//if the number of versions exceeds 1, the "revive workshop" button will be enabled
		if ($numVersions>1)
			$reviveEnabled = 1;
		string $displayString="";
		string $versionString="";
		
		if ($currType=="workshop") //if currently open file is a workshop...
		{
			//build version info to display
			$versionString+=($wName+" version "+$currVersion);
		}
		else if ($currType=="master")
		{
			$versionString = $mName;
		}
		if (($currCat=="asset")||($currCat=="shot")) //if the currently open file is an ASSET or SHOT...
		{
			//build string to display
			string $assetName = openPipelineGetFolderFromPath($currPath,0);
			string $assetType = openPipelineGetFolderFromPath($currPath,1);
			$displayString+=($assetType+": "+$assetName+"  ("+interToUI($currCat)+")");
		}
		else if (($currCat=="component")||($currCat=="shotComponent")) //if the currently open file is a COMPONENT or SHOT COMPONENT...
		{
			//build string to display
			string $assetName = openPipelineGetFolderFromPath($currPath,2);
			string $assetType = openPipelineGetFolderFromPath($currPath,3);
			string $compName = openPipelineGetFolderFromPath($currPath,0);
			$displayString+=($assetType+": "+ $assetName+": "+$compName+"  ("+interToUI($currCat)+")");
		}
		
		string $prevImg = $currPath+$openPipeline_previewFilename;
		if (`filetest -r $prevImg`)
			image -e -i $prevImg -bgc 0 0 0 op_currPreviewImage;
		else
			image -e -i ($openPipeline_scriptPath+"openPipeline/"+$openPipeline_noPreviewFilename) -bgc 0 0 0 op_currPreviewImage;
			
			string $noteText = openPipelineGetDescription($currPath);
			scrollField -e -editable 1 -text $noteText op_currNoteField;
			openPipelineLoadCurrentHistory();
			button -e -en $reviveEnabled  op_reviveButton;
			button -e -en 1 op_closeButton;
			button -e -en 1 op_saveWorkshopButton;	
			button -e -en 1 op_masterButton;
			button -e -en 1 op_clearNoteButton;
			button -e -en 0 op_saveNoteButton;
			button -e -en 1 op_snapshotButton;
				
				if ($latestVersion==$currVersion)
					text -e -bgc .8 .6 .5 op_currOpenHeadingVersion;
				else
					text -e -bgc .5 .7 .7 op_currOpenHeadingVersion;
				text -e -vis 1 -l $versionString op_currOpenHeadingVersion;

			//update Main Heading
			text -e -label $displayString op_currOpenHeading;
		
		if ($currType=="master")
		{
			text -e -bgc .9 .7 .4 op_currOpenHeadingVersion;
			button -e -en 0 op_saveWorkshopButton;
			button -e -en 0 op_masterButton;
		}
	}
	openPipelineRemoveSecondaryWindows;
}



//###########################################
// Name: openPipelineRemoveSecondaryWindows
// Description: Closes secondary oP windows
// Input: none
// Returns: none
//###########################################
global proc openPipelineRemoveSecondaryWindows()
{
	if(`window -exists op_secondaryUI`)
		deleteUI op_secondaryUI;
}

//###########################################
// Name: openPipelineProjSelected
// Description: This proc is run whenever a new Project is selected.  In turn, it updates all UI elements below the project level. 
// Input: none
// Returns: none
//###########################################
global proc openPipelineProjSelected(int $refreshCurrOpen)
{
	global string $openPipeline_scriptPath; 
	global string $openPipeline_iconFilename;
	progressWindow -min 0 -max 10 -pr 0 -st "Please Wait.." -title "Getting Project Info";
	
	int $projIndex = `optionMenu -q -sl projNameMenu`;
	string $projName = `optionMenu -q -v projNameMenu`;
	string $projXml = openPipelineGetSingleProjectXml($projName);
	string $projPath = openPipelineGetXmlData($projXml, "path");
	if (!endsWith($projPath,"/")) 
  	$projPath += "/"; 
	progressWindow -e -s 1;
	string $projLib = openPipelineGetXmlData($projXml, "libraryfolder");
	string $projShots = openPipelineGetXmlData($projXml, "scenesfolder");

	string $projArchive = openPipelineGetXmlData($projXml, "archivefolder");
	string $projMFormat = openPipelineGetXmlData($projXml, "masterformat");
	
	string $projWFormat = openPipelineGetXmlData($projXml, "workshopformat");
	string $projMName = openPipelineGetXmlData($projXml, "mastername");
	string $projWName = openPipelineGetXmlData($projXml, "workshopname");
	
	string $libPath = ($projPath + $projLib + "/");
	string $shotPath = ($projPath + $projShots + "/");
	string $archivePath = ($projPath + $projArchive + "/");
	progressWindow -e -s 1;
	optionVar -iv "op_currProject" $projIndex;
	optionVar -sv "op_currProjectName" $projName;
	optionVar -sv "op_currProjectPath" $projPath;
	optionVar -sv "op_libPath" $libPath;
	optionVar -sv "op_shotPath" $shotPath;
	optionVar -sv "op_archivePath" $archivePath;
	optionVar -sv "op_masterFormat" $projMFormat;
	optionVar -sv "op_workshopFormat" $projWFormat;
	optionVar -sv "op_masterName" $projMName;
	optionVar -sv "op_workshopName" $projWName;
	progressWindow -e -s 1;
	string $projList[] = openPipelineGetProjectList();
	
	if ((size($projList))<`optionMenu -q -ni projNameMenu`)
	{
		//if the number of projects does not match the number of projects listed in the menu, refresh the window
		//this would happen in the case that the user manually deleted or renamed a project folder 
		openPipelineUI();
		return;
	}
		progressWindow -e -s 1;
	setProject $projPath;
	textField -e -text $projPath projPath;
	string $iconFile = $projPath+$openPipeline_iconFilename;
	string $defIconFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_iconFilename;
	progressWindow -e -s 1;
	if (`filetest -r $iconFile`)
	    image -e -i $iconFile op_iconImage;
	else
	    image -e -i $defIconFile op_iconImage;
	string $buffer[];
	int $numDepth = `tokenize $projPath "/" $buffer`;
	progressWindow -e -s 1;
	string $currentProjectShort = $buffer[$numDepth - 1];
	
	progressWindow -e -s 1;

	openPipelineUpdateCustomUI();
	if ($refreshCurrOpen)
	{
		//if necessary, the info about the currently open file is cleared
		optionVar -sv "op_currOpenPath" "";
		optionVar -sv "op_currOpenType" "";
		optionVar -sv "op_currOpenCategory" "";
		optionVar -iv "op_currOpenVersion" 0;
	}
	progressWindow -e -s 1;
	//update asset type list and shot list
	openPipelineUpdateCurrentlyOpen();
	openPipelineUpdateAssetTypeList();
	progressWindow -e -s 1;
	openPipelineUpdateSequenceList();
	progressWindow -e -s 1;
	progressWindow -ep;
}

//###########################################
// Name: openPipelineUpdateCustomUI
// Description: Updates the UI to reflect user-defined names for "workshop" and "master"
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateCustomUI()
{
    string $masterName = `optionVar -q "op_masterName"`;
    string $workshopName = `optionVar -q "op_workshopName"`;
    string $workshopButton = capitalizeString($workshopName);
    string $masterButton = capitalizeString($masterName);
    button -e -l ("Save "+$workshopButton) -w 164 op_saveWorkshopButton;
    //button -e -l ("Revive "+$workshopButton) -w 164 op_reviveButton;
    button -e -l ("Save " + $masterButton) -w 164 op_masterButton;

    menuItem -e -label ("View "+$masterButton) op_assetMenuView;
    menuItem -e -l $workshopButton op_assetMenuImportWorkshop;
    menuItem -e -l $masterButton op_assetMenuImportMaster;
    menuItem -e -l $workshopButton op_assetMenuReferenceWorkshop;
    menuItem -e -l $masterButton op_assetMenuReferenceMaster;
    
    menuItem -e -label ("View "+$masterButton) op_assetMenuView2;
    menuItem -e -l $workshopButton op_assetMenuImportWorkshop2;
    menuItem -e -l $masterButton op_assetMenuImportMaster2;
    menuItem -e -l $workshopButton op_assetMenuReferenceWorkshop2;
    menuItem -e -l $masterButton op_assetMenuReferenceMaster2;
    
    menuItem -e -label ("View "+$masterButton) op_compMenuView;
    menuItem -e -l $workshopButton op_compMenuImportWorkshop;
    menuItem -e -l $masterButton op_compMenuImportMaster;
    menuItem -e -l $workshopButton op_compMenuReferenceWorkshop;
    menuItem -e -l $masterButton op_compMenuReferenceMaster;
    
    menuItem -e -label ("View "+$masterButton) op_compMenuView2;
    menuItem -e -l $workshopButton op_compMenuImportWorkshop2;
    menuItem -e -l $masterButton op_compMenuImportMaster2;
    menuItem -e -l $workshopButton op_compMenuReferenceWorkshop2;
    menuItem -e -l $masterButton op_compMenuReferenceMaster2;
    
    menuItem -e -label ("View "+$masterButton) op_shotMenuView;
    menuItem -e -l $workshopButton op_shotMenuImportWorkshop;
    menuItem -e -l $masterButton op_shotMenuImportMaster;
    menuItem -e -l $workshopButton op_shotMenuReferenceWorkshop;
    menuItem -e -l $masterButton op_shotMenuReferenceMaster;
    
    menuItem -e -label ("View "+$masterButton) op_shotMenuView2;
    menuItem -e -l $workshopButton op_shotMenuImportWorkshop2;
    menuItem -e -l $masterButton op_shotMenuImportMaster2;
    menuItem -e -l $workshopButton op_shotMenuReferenceWorkshop2;
    menuItem -e -l $masterButton op_shotMenuReferenceMaster2;
}

//###########################################
// Name: openPipelineUpdateShotList
// Description: Updates list of shots in the UI
// Input: preserveSelection - whether the current selected item in the list should still be selected after updating (int)
// Returns: none
//###########################################
global proc openPipelineUpdateShotList(int $preserveSelection)
{
	string $lastSelectedShot = openPipelineGetSelectedShot();
	textScrollList -e -ra "op_shotScrollList";
	optionVar -ca "op_shots";
	int $active = 0;

	string $selectedSequence = openPipelineGetSelectedSequence();

	if (size($selectedSequence))
	{
		string $shotFiles[] = `getFileList -folder $selectedSequence`;
		int $numShots = `size($shotFiles)`;
		for ($j = 0; $j < $numShots; $j++)
			{
				string $shotPath = $selectedSequence + $shotFiles[$j] + "/";
				if (openPipelineIsValidFolder($shotPath))
				{
					$active = 1;
					optionVar -sva "op_shots" ($shotPath);
					string $post="";
					string $pre="";
					
					int $masterExists = openPipelineShotHasMaster($shotPath);
					int $workshopExists = openPipelineAssetHasWorkshop($shotPath);
					if($masterExists)
					{
						$post+=" +";
					}
					else if ($workshopExists)
					{
						$post+=" -";
					}
								
					if ($shotPath == `optionVar -q "op_currOpenPath"`)
					{
						$pre = "*";
						$post+=" *";
					}
					textScrollList -e -a ($pre+$shotFiles[$j]+$post) "op_shotScrollList";
					if (($lastSelectedShot==$shotPath)&&($preserveSelection))
						textScrollList -e -si ($pre+$shotFiles[$j]+$post) "op_shotScrollList";
				}
			}
		}
	
	button -e -en (size($selectedSequence)) op_sequenceRemoveButton;
	if (size($selectedSequence))
			button -e -en 1 op_shotNewButton;
	else
			button -e -en 0 op_shotNewButton;
	textScrollList -e -en $active op_shotScrollList;
	openPipelineShotSelected(1);
	//openPipelineUpdateShotAssetTypeList();
}
	/*
//###########################################
// Name: openPipelineUpdateShotAssetTypeList
// Description: Updates list of asset types in the "Available Assets" section of the Shot Management Tab
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateShotAssetTypeList()
{

	string $lastSelectedPaths[] = `textScrollList -q -si op_shotAssetTypeList`;
	textScrollList -e -ra "op_shotAssetTypeList";
	string $libPath = `optionVar -q "op_libPath"`; 
	string $libTypeFiles[] = `getFileList -folder $libPath`;
	int $numLibType = `size($libTypeFiles)`;
	for($i = 0; $i < $numLibType; $i++)
	{
		string $path = $libPath+$libTypeFiles[$i]+"/";
		if (openPipelineIsValidFolder($path))
		{
			textScrollList -e -w 135 -a $libTypeFiles[$i] op_shotAssetTypeList;
			for ($j=0; $j< (size($lastSelectedPaths)); $j++)
			{
			if ($libTypeFiles[$i]==$lastSelectedPaths[$j])
				textScrollList -e -si $libTypeFiles[$i] op_shotAssetTypeList;
			}
		}
	}
	openPipelineShotAssetTypeSelected();

}
*/
	
//###########################################
// Name: openPipelineShotSelected
// Description: This proc is called whenever a Shot is selected in the UI. In turn, it updates all the UI elements affected by what Shot is selected.
// Input: preserveSelection - whether currently selected items should still be selected after updating (int)
// Returns: none
//###########################################
global proc openPipelineShotSelected(int $preserveSelection)
{
	string $selCompPath = openPipelineGetSelectedShotComponent();
	textScrollList -e -ra "op_shotComponentScrollList";
	optionVar -ca "op_shotComponents";
	int $active = 0;
	
	string $currShot = openPipelineGetSelectedShot();
	int $selected = 1;
	if ($currShot=="")
		$selected = 0;
	
			button -e -en $selected op_shotRemoveButton;
			button -e -en $selected op_shotArchiveButton;
			button -e -en $selected op_shotComponentNewButton;
			menuItem -e -en $selected op_shotMenuEdit;
			menuItem -e -en $selected op_shotMenuEdit2;
			menuItem -e -en $selected op_shotMenuImport;
			menuItem -e -en $selected op_shotMenuImport2;
			menuItem -e -en $selected op_shotMenuReference;
			menuItem -e -en $selected op_shotMenuReference2;
	
	if ($selected)
	{
		string $compPath = ($currShot + "components/");
		string $compFiles[] = `getFileList -folder $compPath`;
		int $numComps = `size($compFiles)`;
		openPipelineUpdateShotMenus($currShot);
		for($j = 0; $j < $numComps; $j++)
		{
			string $componentPath = ($compPath + $compFiles[$j] + "/");
			if (openPipelineIsValidFolder($componentPath))
			{
				$active = 1;
				string $post="";
				string $pre="";
				optionVar -sva "op_shotComponents" $componentPath;
				int $masterExists = openPipelineComponentHasMaster($componentPath);
				int $workshopExists = openPipelineComponentHasWorkshop($componentPath);
				if($masterExists)
				{
					$post+=" +";
				}
				else if ($workshopExists)
				{
					$post+=" -";
				}			
				if($componentPath == `optionVar -q "op_currOpenPath"`)
				{
					$pre = "* ";
					$post+=" *";
				}
				textScrollList -e -w 125 -a ($pre+$compFiles[$j]+$post) "op_shotComponentScrollList";
				if (($selCompPath==$componentPath)&&($preserveSelection))
					textScrollList -e -si ($pre+$compFiles[$j]+$post) "op_shotComponentScrollList";
			}
		}
	
	}
	textScrollList -e -en $active "op_shotComponentScrollList";
	openPipelineShotComponentSelected();
	
}

//###########################################
// Name: openPipelineShotAssetTypeSelected
// Description: This proc is called whenever an Asset Type is selected from the Available Assets section of the Shot Managment Tab. 
// Input: none
// Returns: none
//###########################################
/*
global proc openPipelineShotAssetTypeSelected()
{

	textScrollList -e -ra "op_shotAssetList";
	optionVar -ca "op_shotAssets";
	int $active = 0;

	string $selectedTypes[] = openPipelineGetSelectedShotAssetTypes();

	if (size($selectedTypes))
	{
		for ($i=0; $i<(size($selectedTypes)); $i++)
		{
			string $currType = $selectedTypes[$i];
			string $assetFiles[] = `getFileList -folder $currType`;
			int $numAssets = `size($assetFiles)`;
			if ($numAssets)
				$active = 1;
		
			for ($j = 0; $j < $numAssets; $j++)
			{
				string $assetPath = $currType + $assetFiles[$j] + "/";
				if (openPipelineIsValidFolder($assetPath))
				{
					optionVar -sva "op_shotAssets" ($assetPath);
					string $post="";
					string $pre="";
					
					int $masterExists = openPipelineAssetHasMaster($assetPath);
					int $workshopExists = openPipelineAssetHasWorkshop($assetPath);
					
					if($masterExists)
					{
						$post+=" +";
					}
					else if ($workshopExists)
					{
						$post+=" -";
					}
								
					if ($assetPath == `optionVar -q "op_currOpenPath"`)
					{
						$pre = "*";
						$post+=" *";
					}
					textScrollList -e -w 135 -a ($pre+$assetFiles[$j]+$post) "op_shotAssetList";
				}
			}
		}
	}
	button -e -en (size($selectedTypes)) op_assetTypeRemoveButton;
	if (size($selectedTypes)==1)
		button -e -en 1 op_assetNewButton;
	else
		button -e -en 0 op_assetNewButton;
	
	textScrollList -e -en $active "op_shotAssetList";

	openPipelineShotAssetSelected();
}
	*/
//###########################################
// Name: openPipelineShotAssetSelected
// Description: This proc is called whenever an Asset is selected from the Available Assets section of the Shot Managment Tab. 
// Input: none
// Returns: none
//###########################################
	/*
global proc openPipelineShotAssetSelected()
{

	string $currAssetPath = openPipelineGetSelectedShotAsset();

	if (($currAssetPath!="")&&(openPipelineAssetHasMaster($currAssetPath)))
	{
		button -e -en 1 op_importToShotButton;
		button -e -en 1 op_referenceToShotButton;
	}else{
		button -e -en 0 op_importToShotButton;
		button -e -en 0 op_referenceToShotButton;
	}
}
	*/
	
//###########################################
// Name: openPipelineUpdateAssetTypeList
// Description: Updates the list of Asset Types in the UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateAssetTypeList()
{
	string $lastSelectedPaths[] = openPipelineGetSelectedAssetTypes();
	textScrollList -e -ra "op_assetTypeScrollList";
	optionVar -ca "op_assetTypes"; 
	string $libPath = `optionVar -q "op_libPath"`;
	string $libTypeFiles[] = `getFileList -folder $libPath`;
	int $numLibType = `size($libTypeFiles)`;
	for($i = 0; $i < $numLibType; $i++)
	{
		string $path = $libPath+$libTypeFiles[$i]+"/";
		
		if (openPipelineIsValidFolder($path))
		{
			optionVar -sva "op_assetTypes" ($path);
			textScrollList -e -w 125 -a $libTypeFiles[$i] op_assetTypeScrollList;
			for ($j=0; $j< (size($lastSelectedPaths)); $j++)
			{
				if ($libTypeFiles[$i]==basename($lastSelectedPaths[$j],""))
					textScrollList -e -si $libTypeFiles[$i] op_assetTypeScrollList;
			}
		}
	}	
	openPipelineAssetTypeSelected(1);
}

//###########################################
// Name: openPipelineUpdateSequenceList
// Description: Updates the list of Sequences in the UI
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateSequenceList()
{
	string $lastSelectedPath = openPipelineGetSelectedSequence();
	textScrollList -e -ra "op_sequenceScrollList";
	optionVar -ca "op_sequences"; 
	string $shotPath = `optionVar -q "op_shotPath"`;
	string $sequenceFiles[] = `getFileList -folder $shotPath`;
	int $numSequences = `size($sequenceFiles)`;
	for($i = 0; $i < $numSequences; $i++)
	{
		string $path = $shotPath+$sequenceFiles[$i]+"/";
		
		if (openPipelineIsValidFolder($path))
		{
			optionVar -sva "op_sequences" ($path);
			textScrollList -e -w 125 -a $sequenceFiles[$i] op_sequenceScrollList;
			
			if ($sequenceFiles[$i]==basename($lastSelectedPath,""))
					textScrollList -e -si $sequenceFiles[$i] op_sequenceScrollList;
		
		}
	}	
	openPipelineUpdateShotList(1);
}

//###########################################
// Name: openPipelineGetSelectedShotAssetTypes
// Description: Returns the Asset Types selected under the Available Assets list of the Shot Management tab
// Input: none
// Returns: A string array, with each entry representing a full path to the Asset Type selected. Empty array is returned if no Asset Type is selected.
//###########################################
global proc string[] openPipelineGetSelectedShotAssetTypes()
{
	string $selectedTypePaths[];
	string $types[];
	if (`optionVar -as "op_assetTypes"`)
	{
		$types = `optionVar -q "op_assetTypes"`;
		int $selectedTypes[] = `textScrollList -q -sii op_shotAssetTypeList`;
		if (size($selectedTypes))
		{
			for ($i=0; $i<(size($selectedTypes)); $i++)
			{
				$selectedTypePaths[$i] = $types[$selectedTypes[$i]-1];
			}
		}
	}
	return $selectedTypePaths;
}

//###########################################
// Name: openPipelineGetSelectedShotAssetTypes
// Description: Returns the Asset selected under the Available Assets list of the Shot Management tab
// Input: none
// Returns: A string representing the full path to the Asset selected. Empty string is returned if no Asset is selected.
//###########################################
global proc string openPipelineGetSelectedShotAsset()
{
	string $selectedAssetPath="";
	string $assets[];
	if (`optionVar -as "op_shotAssets"`)
	{
		$assets = `optionVar -q "op_shotAssets"`;
		int $selectedAsset[] = `textScrollList -q -sii op_shotAssetList`;
		if ($selectedAsset[0])
		{
			$selectedAssetPath = $assets[($selectedAsset[0])-1];
		}
	}
	return $selectedAssetPath;
}

//###########################################
// Name: openPipelineGetSelectedAssetTypes
// Description: Returns the currently selected Asset Types 
// Input: none
// Returns: A string array, with each entry representing a full path to the Asset Type selected. Empty array is returned if no Asset Type is selected.
//###########################################
global proc string[] openPipelineGetSelectedAssetTypes()
{
	string $selectedTypePaths[];
	string $types[];
	if (`optionVar -as "op_assetTypes"`)
	{
		$types = `optionVar -q "op_assetTypes"`;
		int $selectedTypes[] = `textScrollList -q -sii op_assetTypeScrollList`;
		if (size($selectedTypes))
		{
			for ($i=0; $i<(size($selectedTypes)); $i++)
			{
				$selectedTypePaths[$i] = $types[$selectedTypes[$i]-1];
			}
		}
	}
		return $selectedTypePaths;
}

//###########################################
// Name: openPipelineGetSelectedSequence
// Description: Returns the currently selected Sequence
// Input: none
// Returns: A full path to the Sequence selected. An empty string is returned if none is selected. (string)
//###########################################
global proc string openPipelineGetSelectedSequence()
{
	string $selectedSequencePath="";
	string $sequences[];
	if (`optionVar -as "op_sequences"`)
	{
		$sequences = `optionVar -q "op_sequences"`;
		int $selectedSequence[] = `textScrollList -q -sii op_sequenceScrollList`;
		if ($selectedSequence[0])
		
			$selectedSequencePath = $sequences[($selectedSequence[0])-1];
	}	
	return $selectedSequencePath;
}

//###########################################
// Name: openPipelineGetSelectedAsset
// Description: Returns the currently selected Asset
// Input: none
// Returns: A full path to the Asset selected. An empty string is returned if none is selected. (string)
//###########################################
global proc string openPipelineGetSelectedAsset()
{
	string $selectedAssetPath="";
	string $assets[];
	if (`optionVar -as "op_assets"`)
	{
		$assets = `optionVar -q "op_assets"`;
		int $selectedAsset[] = `textScrollList -q -sii op_assetScrollList`;
		if ($selectedAsset[0])
		{
			$selectedAssetPath = $assets[($selectedAsset[0])-1];
		}
	}
	return $selectedAssetPath;
}

//###########################################
// Name: openPipelineGetSelectedComponent
// Description: Returns the currently selected Component
// Input: none
// Returns: A full path to the Component selected. An empty string is returned if none is selected. (string)
//###########################################
global proc string openPipelineGetSelectedComponent()
{
	string $selectedCompPath="";
	string $components[];
	if (`optionVar -as "op_components"`)
	{
		$components = `optionVar -q "op_components"`;
		int $selected[] = `textScrollList -q -sii "op_componentScrollList"`;
		if (size($selected))
		{
			$selectedCompPath = $components[($selected[0])-1];
		}
	}
	return $selectedCompPath;
}

//###########################################
// Name: openPipelineGetSelectedShotComponent
// Description: Returns the currently selected Shot Component
// Input: none
// Returns: A full path to the Shot Component selected. An empty string is returned if none is selected. (string)
//###########################################
global proc string openPipelineGetSelectedShotComponent()
{
	string $selectedCompPath="";
	string $components[];
	if (`optionVar -as "op_shotComponents"`)
	{
		$components = `optionVar -q "op_shotComponents"`;
		int $selected[] = `textScrollList -q -sii "op_shotComponentScrollList"`;
		if (size($selected))
		{
			$selectedCompPath = $components[($selected[0])-1];
		}
	}
	return $selectedCompPath;
}

//###########################################
// Name: openPipelineGetSelectedShot
// Description: Returns the currently selected Shot 
// Input: none
// Returns: A full path to the Shot selected. An empty string is returned if none is selected. (string)
//###########################################
global proc string openPipelineGetSelectedShot()
{
	string $selectedShotPath="";
	string $shots[];
	if (`optionVar -as "op_shots"`)
	{
		$shots = `optionVar -q "op_shots"`;
		int $selected[] = `textScrollList -q -sii "op_shotScrollList"`;
		if (size($selected))
		{
			$selectedShotPath = $shots[($selected[0])-1];
		}
	}
	return $selectedShotPath;
}

//###########################################
// Name: openPipelineAssetTypeSelected
// Description: This proc is called whenever an Asset Type is selected. It updates all the UI elements below the Asset Type level.
// Input: preserveSelection - whether previously selected items should still be selected after the update (int)
// Returns: none
//###########################################
global proc openPipelineAssetTypeSelected(int $preserveSelection)
{
	string $lastSelectedPath = openPipelineGetSelectedAsset();
	textScrollList -e -ra "op_assetScrollList";
	optionVar -ca "op_assets";
	int $active = 0;
	
	string $selectedTypes[] = openPipelineGetSelectedAssetTypes();

	if (size($selectedTypes))
	{
		for ($i=0; $i<(size($selectedTypes)); $i++)
		{
			string $currType = $selectedTypes[$i];
			string $assetFiles[] = `getFileList -folder $currType`;
			int $numAssets = `size($assetFiles)`;
			for ($j = 0; $j < $numAssets; $j++)
			{
				string $assetPath = $currType + $assetFiles[$j] + "/";
				if (openPipelineIsValidFolder($assetPath))
				{
					$active = 1;
					optionVar -sva "op_assets" ($assetPath);
					string $post="";
					string $pre="";
					
					int $masterExists = openPipelineAssetHasMaster($assetPath);
					int $workshopExists = openPipelineAssetHasWorkshop($assetPath);
					if($masterExists)
					{
						$post+=" +";
					}
					else if ($workshopExists)
					{
						$post+=" -";
					}
								
					if ($assetPath == `optionVar -q "op_currOpenPath"`)
					{
						$pre = "*";
						$post+=" *";
					}
					textScrollList -e -w 125 -a ($pre+$assetFiles[$j]+$post) "op_assetScrollList";
					if (($lastSelectedPath==$assetPath)&&($preserveSelection))
						textScrollList -e -si ($pre+$assetFiles[$j]+$post) "op_assetScrollList";
				}
			}
		}	
	}
		button -e -en (size($selectedTypes)) op_assetTypeRemoveButton;
		if (size($selectedTypes)==1)
			button -e -en 1 op_assetNewButton;
		else
			button -e -en 0 op_assetNewButton;
	textScrollList -e -en $active "op_assetScrollList";

	openPipelineAssetSelected(1);
}

//###########################################
// Name: openPipelineAssetSelected
// Description: This proc is called whenever an Asset is selected. It updates all the UI elements below the Asset level.
// Input: preserveSelection - Whether previously selected items should still be selected after the update (int)
// Returns: none
//###########################################
global proc openPipelineAssetSelected(int $preserveSelection)
{
	string $lastSelectedPath = openPipelineGetSelectedComponent();
	textScrollList -e -ra "op_componentScrollList";
	optionVar -ca "op_components";
	int $active = 0;
	
	string $currAsset = openPipelineGetSelectedAsset();
	int $selected = 1;
	if ($currAsset=="")
		$selected = 0;
	
		menuItem -e -en $selected op_assetMenuEdit;
		menuItem -e -en $selected op_assetMenuView;
		menuItem -e -en $selected op_assetMenuImport;
		menuItem -e -en $selected op_assetMenuReference;
		
		menuItem -e -en $selected op_assetMenuEdit2;
		menuItem -e -en $selected op_assetMenuView2;
		menuItem -e -en $selected op_assetMenuImport2;
		menuItem -e -en $selected op_assetMenuReference2;
		
		button -e -en $selected op_assetRemoveButton;
		button -e -en $selected op_assetArchiveButton;
		button -e -en $selected op_componentNewButton;
	
	if ($selected)
	{
		string $compPath = ($currAsset + "components/");
		string $compFiles[] = `getFileList -folder $compPath`;
		int $numComps = `size($compFiles)`;
			
		openPipelineUpdateAssetMenus($currAsset);

		for($j = 0; $j < $numComps; $j++)
		{
			string $componentPath = ($compPath + $compFiles[$j] + "/");
			if (openPipelineIsValidFolder($componentPath))
			{
				$active = 1;
				string $post="";
				string $pre="";
				optionVar -sva "op_components" $componentPath;
				int $masterExists = openPipelineComponentHasMaster($componentPath);
				int $workshopExists = openPipelineComponentHasWorkshop($componentPath);
				if($masterExists)
				{
					$post+=" +";
				}
				else if ($workshopExists)
				{
					$post+=" -";
				}			
				if($componentPath == `optionVar -q "op_currOpenPath"`)
				{
					$pre = "* ";
					$post+=" *";
				}
				textScrollList -e -w 125 -a ($pre+$compFiles[$j]+$post) "op_componentScrollList";
				if (($lastSelectedPath==$componentPath)&&($preserveSelection))
					textScrollList -e -si ($pre+$compFiles[$j]+$post) "op_componentScrollList";
			}
		}
	}
	textScrollList -e -en $active "op_componentScrollList";
	openPipelineComponentSelected();
}

//###########################################
// Name: openPipelineComponentSelected
// Description: This proc is called whenever a Component is selected. It updates all the UI affected by what Component is currently selected.
// Input: preserveSelection - none
// Returns: none
//###########################################
global proc openPipelineComponentSelected()
{
	string $currComponent = openPipelineGetSelectedComponent();
	int $selected = 1;
	if ($currComponent=="")
		$selected = 0;
	
	menuItem -e -en $selected op_compMenuEdit;
	menuItem -e -en $selected op_compMenuView;
	menuItem -e -en $selected op_compMenuImport;
	menuItem -e -en $selected op_compMenuReference;
	menuItem -e -en $selected op_compMenuView2;
	menuItem -e -en $selected op_compMenuImport2;
	menuItem -e -en $selected op_compMenuReference2;
	menuItem -e -en $selected op_compMenuEdit2;
	button -e -en $selected op_componentRemoveButton;
	button -e -en $selected op_componentArchiveButton;
	
	if ($selected)
	{
		openPipelineUpdateComponentMenus($currComponent);
	   
	}
	openPipelineAssetInformation;
	openPipelineLoadAssetHistory;
}

//###########################################
// Name: openPipelineShotComponentSelected
// Description: This proc is called whenever a Shot Component is selected. It updates all the UI affected by what Shot Component is currently selected.
// Input: none
// Returns: none
//###########################################
global proc openPipelineShotComponentSelected()
{
	string $currComponent = openPipelineGetSelectedShotComponent();
	int $selected = 1;
	if ($currComponent=="")
		$selected = 0;
	
	menuItem -e -en $selected op_shotcompMenuEdit;
	menuItem -e -en $selected op_shotcompMenuView;
	menuItem -e -en $selected op_shotcompMenuImport;
	menuItem -e -en $selected op_shotcompMenuReference;
	menuItem -e -en $selected op_shotcompMenuView2;
	menuItem -e -en $selected op_shotcompMenuImport2;
	menuItem -e -en $selected op_shotcompMenuReference2;
	menuItem -e -en $selected op_shotcompMenuEdit2;
	button -e -en $selected op_shotComponentRemoveButton;
	button -e -en $selected op_shotComponentArchiveButton;
	
	if ($selected)
	{
		openPipelineUpdateShotComponentMenus($currComponent);
	   
	}
	openPipelineShotInformation;
	openPipelineLoadShotHistory;
}

//###########################################
// Name: openPipelineAboutDialog
// Description: Shows the "About" window, with information and credits
// Input: none
// Returns: none
//###########################################
global proc openPipelineAboutDialog()
{
	if (`window -q -exists infoWindow`)
	{
		deleteUI infoWindow;	
	}
	
	string $infoWindow = `window 
			-title "About openPipeline"
			-widthHeight 300 250
			infoWindow`;

	columnLayout -adjustableColumn true;
		scrollField -wordWrap true -width 300 -height 200
			-text ("openPipeline\n\nopenPipeline is an open source, free, " + 
				"and customizable pipeline for production (in Autodesk Maya)." + 
				"\n\nCreated by:\n Rob O'Neill (roneill@dal.pratt.edu)\n " +
				"Meng-Han Ho (mho@pratt.edu)\n Paris Mavroidis (paris@parismav.com)" + 
				"\n\nMore information may be found at:\n http://openpipeline.sourceforge.net/")
				-editable false;
				
 	    button -label "Close" -command ("deleteUI -window " + $infoWindow);
 	setParent ..;
 	window -e -widthHeight 300 250 $infoWindow;
 	showWindow $infoWindow;		
}


//###########################################
// Name: openPipelineHelpLaunch
// Description: Launches the online Help for oP
// Input: none
// Returns: none
//###########################################
global proc openPipelineHelpLaunch()
{
	string $URL = "http://openpipeline.sourceforge.net/";
	showHelp -absolute $URL;
}	

//###########################################
// Name: openPipelineNewAssetTypeUI
// Description: Launches the UI for creating a new Asset Type
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewAssetTypeUI()
{
	string $assetType;
	string $error="";
	string $result = `promptDialog 
		-title "new asset type"
		-message "asset type name\n (no spaces or special characters):\n "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-sf 1
		-dismissString "cancel"`;
	
	if ($result == "create")
	{
		$assetType = strip(`promptDialog -query -text`);
		if (!isValidString($assetType, "([a-zA-Z0-9_])*"))
			$error+="Invalid Asset Type Name (no special characters or spaces allowed).\n";
				
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewAssetTypeProcess($assetType);
			openPipelineUpdateAssetTypeList();					
		}
	}
}

//###########################################
// Name: openPipelineNewSequenceUI
// Description: Launches the UI for creating a new Sequence
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewSequenceUI()
{
	string $sequence;
	string $error="";
	string $result = `promptDialog 
		-title "new sequence"
		-message "sequence name: \n (no spaces or special characters)\n "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if ($result == "create")
	{
		$sequence = strip(`promptDialog -query -text`);
		
 			
		if (!isValidString($sequence, "([a-zA-Z0-9_])*"))
			$error+="Invalid Asset Type Name (no special characters or spaces allowed).\n";
				
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewSequenceProcess($sequence);
			openPipelineUpdateSequenceList();					
		}
	}
	
}

//###########################################
// Name: openPipelineNewAssetUI
// Description: Launches the UI for creating a new Asset
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewAssetUI()
{
	string $error="";
	string $result = `promptDialog 
		-title "new asset"
		-message "asset name:\n(no spaces or special characters)\n "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
 		$assetName = strip(`promptDialog -query -text`);
		if (!isValidString($assetName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Asset Name (no special characters or spaces allowed).\n";
				
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewAssetProcess($assetName);
			openPipelineAssetTypeSelected(1);			
		}
	}
}

//###########################################
// Name: openPipelineNewAssetComponentUI
// Description: Launches the UI for creating a new Component
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewAssetComponentUI()
{
	string $error;
	string $result = `promptDialog 
		-title "new component" 
		-message "component name:\n(no spaces or special characters)\n  "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		$componentName = strip(`promptDialog -query -text`);
		if (!isValidString($componentName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Component Name (no special characters or spaces allowed).\n  ";
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewComponentProcess($componentName);
			openPipelineAssetSelected(1);
		}
	}
}

//###########################################
// Name: openPipelineNewShotComponentUI
// Description: Launches the UI for creating a new Shot Component
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewShotComponentUI()
{
	string $error;
	string $result = `promptDialog 
		-title "new shot component" 
		-message "component name:\n(no spaces or special characters)\n "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		$componentName = strip(`promptDialog -query -text`);
		if (!isValidString($componentName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Component Name (no special characters or spaces allowed).\n  ";
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}
		else
		{
			openPipelineNewShotComponentProcess($componentName);
			openPipelineShotSelected(1);
		}
	}
}

//###########################################
// Name: openPipelineNewShotUI
// Description: Launches the UI for creating a new Shot
// Input: none
// Returns: none
//###########################################
global proc openPipelineNewShotUI()
{
	global string $openPipelineNewShotName = "";
	
	string $error;
	string $result = `promptDialog 
		-title "new shot"
		-message "shot name:    \n (no spaces or special characters)\n "
		-button "create" -button "cancel"
		-defaultButton "create" -cancelButton "cancel"
		-dismissString "cancel"`;
	
	if($result == "create")
	{
		string $shotName = strip(`promptDialog -query -text`);
		if (!isValidString($shotName, "([a-zA-Z0-9_])*"))
			$error+="Invalid Shot Name (no special characters or spaces allowed).\n";
		if($error != "")
		{
			confirmDialog -title "openPipeline Error" -message $error
 				-button "OK" -defaultButton "OK";
		}else{
			$openPipelineNewShotName = $shotName;
			openPipelineNewShotProcess($shotName);
			openPipelineUpdateShotList(1);
		}
	}
}

//###########################################
// Name: openPipelineSaveMasterFileGUI
// Description: Launches the UI for Mastering
// Input: none
// Returns: none
//###########################################
global proc openPipelineSaveMasterFileGUI()
{
	string $type="";
	if (`optionVar -ex op_currOpenType`)
		$type = `optionVar -q op_currOpenType`;
	if ($type=="workshop")
	{
		string $mName = capitalizeString(`optionVar -q "op_masterName"`);
		string $windowExists = `window -exists op_secondaryUI`;
		if($windowExists == 1)
		{
			deleteUI op_secondaryUI;
		}
		
		window -t ($mName+" File Switchboard") -w 300 -h 200 op_secondaryUI;
	
		columnLayout -rs 5 -co "both" 10;
		rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
			// flatten reference...
			checkBox -label "Import References" -v 1 masterImportReferencesBox;
			//  ...
		setParent..;
	
		rowLayout -numberOfColumns 2 -cw2 150 150 -cl2 "center" "center";
			// delete layers...	
			checkBox -label "Delete Display Layers" -v 1 masterDeleteLayersBox;
			//  ...
			// delete layers...	
			checkBox -label ("Open " + $mName) -v 0 masterOpenMasterBox;
			//  ...
		setParent ..;
	
		columnLayout -co "both" 10;
			text -l ("Custom " + $mName + " Command:");
			textField -w 240 op_masterCommandField;
		setParent ..;
	
		// notes...
		rowLayout -numberOfColumns 2 -cw2 60 230 -cl2 "center" "center";
			text -l "comment: " -w 60 -h 20;
			scrollField -w 190 -h 40 -ww 1 op_masterCommentField;
		setParent..;
	
		rowLayout -numberOfColumns 2 -cw2 125 125 -cl2 "center" "center";
			button -w 125 -l $mName -c "openPipelineProcessSave master;openPipelineRemoveSecondaryWindows;" -bgc .9 .7 .4;
			button -w 125 -l "cancel" -c "deleteUI op_secondaryUI;" -bgc .8 .4 .4;
		setParent..;
	
		window -e -w 280 -h 200 op_secondaryUI;
		showWindow op_secondaryUI;
	}
	else if ($type == "master")
	{
		string $mName = capitalizeString(`optionVar -q "op_masterName"`);
		confirmDialog -message ("You're currently viewing a "+$mName+" file. Action not possible.") -button "OK" -title "openPipeline message";
	}
	else
		confirmDialog -message ("Nothing is currently open for editing. Action not possible.") -button "OK" -title "openPipeline message";
}

//###########################################
// Name: openPipelineSaveWorkshopGUI
// Description: Launches the UI for Saving a Workshop
// Input: none
// Returns: none
//###########################################
global proc openPipelineSaveWorkshopGUI()
{
	string $type="";
	if (`optionVar -ex op_currOpenType`)
		$type = `optionVar -q "op_currOpenType"`;
	if ($type=="workshop")
	{
		string $wName = capitalizeString(`optionVar -q "op_workshopName"`);
		string $windowExists = `window -exists op_secondaryUI`;
		if($windowExists == 1)
		{
			deleteUI op_secondaryUI;
		}
		
		window -t ("Save "+$wName) -w 300 -h 85 op_secondaryUI;
	
		columnLayout -rs 5 -co "both" 10;
		
		// notes...
		rowLayout -numberOfColumns 2 -cw2 60 230 -cl2 "center" "center";
			text -l "comment: " -w 60 -h 20;
			textField -w 190 -h 20 op_saveWorkshopCommentField;
		setParent..;
	
		rowLayout -numberOfColumns 2 -cw2 125 125 -cl2 "center" "center";
			button -w 125 -l ("SAVE "+$wName) -c "openPipelineProcessSave workshop;openPipelineRemoveSecondaryWindows;" -bgc .8 .6 .5;
			button -w 125 -l "cancel" -c "deleteUI op_secondaryUI;" -bgc .8 .4 .4;
		setParent..;
	
		window -e -w 280 -h 90 op_secondaryUI;
		showWindow op_secondaryUI;
	}
	else if ($type == "master")
	{
		string $mName = capitalizeString(`optionVar -q "op_masterName"`);
		confirmDialog -message ("You're currently viewing a "+$mName+" file. Action not possible.") -button "OK" -title "openPipeline message";
	}
	else
		confirmDialog -message ("Nothing is currently open for editing. Action not possible.") -button "OK" -title "openPipeline message";
}

//###########################################
// Name: openPipelineReviveGUI
// Description: Launches the UI for Reviving an old Workshop
// Input: none
// Returns: none
//###########################################
global proc openPipelineReviveGUI()
{
	string $path="";
	if (`optionVar -ex op_currOpenPath`)
		$path = `optionVar -q op_currOpenPath`;
	if ($path!="")
	{
		string $wName = `optionVar -q "op_workshopName"`;
		string $currPath = `optionVar -q "op_currOpenPath"`;
	  string $wExt = `optionVar -q "op_workshopFormat"`;
		string $workshop = ($currPath + $wName + "/");
		string $workshopFiles[] = `getFileList -folder $workshop -filespec ("*_" + $wName + "_*."+$wExt)`;
		$workshopFiles = sort($workshopFiles);
		int $numVersions = `size($workshopFiles)`;
		
		if ($numVersions)
		{
			if(`window -exists op_secondaryUI`)
				deleteUI op_secondaryUI;
			window -t ("Revive "+$wName) -w 275 -h 85 op_secondaryUI;
		
			columnLayout -rs 5 -co "both" 10;
			
			// notes...
			rowLayout -numberOfColumns 2 -cw2 130 50 -cl2 "left" "right";
				text -l "Select Version to Revive: " -w 130 -h 30 -al "left";
				optionMenu -w 50 -h 30 -cc openPipelineReviveWorkshopNotesCallback op_reviveVersionMenu;
					int $i;
					for ($i=0;$i<$numVersions;$i++)
					{
						int $version = openPipelineGetVersionFromFile($workshopFiles[$i]);
						menuItem -l $version;
					}
			setParent..;
			
			scrollField -editable 0 -wordWrap 1 -text "" -w 260 -h 100 op_reviveWorkshopNotes;
			
			rowLayout -numberOfColumns 2 -cw2 85 85 -cl2 "center" "center";
				button -w 85 -l "REVIVE" -c "openPipelineReviveWorkshopCallback;openPipelineRemoveSecondaryWindows;" -bgc .5 .7 .7;
				button -w 85 -l "cancel" -c "deleteUI op_secondaryUI" -bgc .8 .4 .4;
			setParent..;
			optionMenu -e -sl $numVersions op_reviveVersionMenu;
			window -e -w 275 -h 210 op_secondaryUI;
			showWindow op_secondaryUI;
			openPipelineReviveWorkshopNotesCallback;
		}
		else
			confirmDialog -message ("No previous "+$wName+" versions exist. Revive not possible.") -button "OK" -title "openPipeline message";
	}
	else
		confirmDialog -message ("Nothing is currently open for editing. Action not possible.") -button "OK" -title "openPipeline message";
}

//###########################################
// Name: openPipelineReviveWorkshopCallback
// Description: Reads the user input from the Revive window and calls the appropriate file operation to revive an old Workshop.
// Input: none
// Returns: none
//###########################################
global proc openPipelineReviveWorkshopCallback()
{
	string $currPath = `optionVar -q "op_currOpenPath"`;
	string $currCat = `optionVar -q "op_currOpenCategory"`;
	int $reviveVersion = `optionMenu -q -v op_reviveVersionMenu`;
	int $latestVersion = openPipelineGetLatestWorkshopVersion($currPath);
	int $versionOffset = $latestVersion-$reviveVersion;
	if ($currCat=="asset")
		openPipelineAssetAction workshop $versionOffset open 1;
	else if ($currCat=="component")
		openPipelineComponentAction workshop $versionOffset open 1;
	else if ($currCat=="shot")
		openPipelineShotAction workshop $versionOffset open 1;
	else if ($currCat=="shotComponent")
		openPipelineShotComponentAction workshop $versionOffset open 1;
}

//###########################################
// Name: openPipelineAssetInformation
// Description: Updates the Notes box and the Preview box in the Asset Management tab
// Input: none
// Returns: none
//###########################################
global proc	openPipelineAssetInformation()
{
	global string $openPipeline_scriptPath; 
	global string $openPipeline_previewFilename;
	global string $openPipeline_noPreviewFilename;
	global string $openPipeline_defaultPreviewFilename;
	string $outputText;
	string $previewFile;
	string $asset = `openPipelineGetSelectedAsset`;
	string $component = `openPipelineGetSelectedComponent`;
	$path = $component;
	if ($component=="")
		$path = $asset;
	if ($path=="")
	{
		$outputText = "";
		$previewFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_defaultPreviewFilename;
	}
	else
		{
		$outputText = openPipelineGetDescription($path);
		if (`filetest -r ($path+$openPipeline_previewFilename)`)
			$previewFile = $path+$openPipeline_previewFilename;
		else
			$previewFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_noPreviewFilename;
		}
	scrollField -e -text $outputText op_assetNoteField;
	image -e -i $previewFile -bgc 0 0 0 op_assetPreviewImage;
}

//###########################################
// Name: openPipelineShotInformation
// Description: Updates the Description box in the Shot Management tab
// Input: none
// Returns: none
//###########################################
global proc openPipelineShotInformation()
{
	global string $openPipeline_scriptPath; 
	global string $openPipeline_previewFilename;
	global string $openPipeline_noPreviewFilename;
	global string $openPipeline_defaultPreviewFilename;
	string $outputText;
	string $previewFile;
	string $shot = `openPipelineGetSelectedShot`;
	string $component = `openPipelineGetSelectedShotComponent`;
	$path = $component;
	if ($component=="")
		$path = $shot;
	if ($path=="")
	{
		$outputText = "";
		$previewFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_defaultPreviewFilename;
	}
	else
	{
		$outputText = openPipelineGetDescription($path);
		if (`filetest -r ($path+$openPipeline_previewFilename)`)
			$previewFile = $path+$openPipeline_previewFilename;
		else
			$previewFile = $openPipeline_scriptPath+"openPipeline/"+$openPipeline_noPreviewFilename;
	}
	scrollField -e -text $outputText op_shotInfoField;
	image -e -i $previewFile -bgc 0 0 0 op_shotPreviewImage;
}

//###########################################
// Name: openPipelineUpdateShotMenus
// Description: Updates the Pop-up menus of the Shot list
// Input: shotPath - the path of the currently selected Shot (string)
// Returns: none
//###########################################
global proc openPipelineUpdateShotMenus(string $shotPath)
{
	int $hasMaster = openPipelineShotHasMaster($shotPath);
	int $hasWorkshop = openPipelineAssetHasWorkshop($shotPath);
	menuItem -e -en $hasMaster op_shotMenuView;
	menuItem -e -en $hasMaster op_shotMenuImportMaster;
	menuItem -e -en $hasMaster op_shotMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_shotMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_shotMenuReferenceWorkshop;
		
	menuItem -e -en $hasMaster op_shotMenuView2;
	menuItem -e -en $hasMaster op_shotMenuImportMaster2;
	menuItem -e -en $hasMaster op_shotMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_shotMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_shotMenuReferenceWorkshop2;
}

//###########################################
// Name: openPipelineUpdateAssetMenus
// Description: Updates the Pop-up menus of the Asset list
// Input: assetPath - the path of the currently selected Asset (string)
// Returns: none
//###########################################
global proc openPipelineUpdateAssetMenus(string $assetPath)
{
	int $hasMaster = openPipelineAssetHasMaster($assetPath);
	int $hasWorkshop = openPipelineAssetHasWorkshop($assetPath);
	menuItem -e -en $hasMaster op_assetMenuView;
	menuItem -e -en $hasMaster op_assetMenuImportMaster;
	menuItem -e -en $hasMaster op_assetMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_assetMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_assetMenuReferenceWorkshop;
		
	menuItem -e -en $hasMaster op_assetMenuView2;
	menuItem -e -en $hasMaster op_assetMenuImportMaster2;
	menuItem -e -en $hasMaster op_assetMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_assetMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_assetMenuReferenceWorkshop2;
}

//###########################################
// Name: openPipelineUpdateComponentMenus
// Description: Updates the Pop-up menus of the Component list
// Input: componentPath - the path of the currently selected Component (string)
// Returns: none
//###########################################
global proc openPipelineUpdateComponentMenus(string $componentPath)
{
	int $hasMaster = openPipelineComponentHasMaster($componentPath);
	int $hasWorkshop = openPipelineComponentHasWorkshop($componentPath);
	menuItem -e -en $hasMaster op_compMenuView;
	menuItem -e -en $hasMaster op_compMenuImportMaster;
	menuItem -e -en $hasMaster op_compMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_compMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_compMenuReferenceWorkshop;
	
	menuItem -e -en $hasMaster op_compMenuView2;
	menuItem -e -en $hasMaster op_compMenuImportMaster2;
	menuItem -e -en $hasMaster op_compMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_compMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_compMenuReferenceWorkshop2;
}

//###########################################
// Name: openPipelineUpdateShotComponentMenus
// Description: Updates the Pop-up menus of the ShotComponent list
// Input: componentPath - the path of the currently selected Shot Component (string)
// Returns: none
//###########################################
global proc openPipelineUpdateShotComponentMenus(string $componentPath)
{
	int $hasMaster = openPipelineComponentHasMaster($componentPath);
	int $hasWorkshop = openPipelineComponentHasWorkshop($componentPath);
	menuItem -e -en $hasMaster op_shotcompMenuView;
	menuItem -e -en $hasMaster op_shotcompMenuImportMaster;
	menuItem -e -en $hasMaster op_shotcompMenuReferenceMaster;
	menuItem -e -en $hasWorkshop op_shotcompMenuImportWorkshop;
	menuItem -e -en $hasWorkshop op_shotcompMenuReferenceWorkshop;
	
	menuItem -e -en $hasMaster op_shotcompMenuView2;
	menuItem -e -en $hasMaster op_shotcompMenuImportMaster2;
	menuItem -e -en $hasMaster op_shotcompMenuReferenceMaster2;
	menuItem -e -en $hasWorkshop op_shotcompMenuImportWorkshop2;
	menuItem -e -en $hasWorkshop op_shotcompMenuReferenceWorkshop2;
}

//###########################################
// Name: openPipelineArchiveDialog
// Description: Creates the Archive UI
// Input: type - the type of the item being archived ('asset', 'component', 'shotComponent', 'shot') (string)
// Returns: none
//###########################################
global proc openPipelineArchiveDialog(string $type)
{
	string $path;
	if ($type=="shot")
		$path = openPipelineGetSelectedShot();
	else if ($type=="asset")
		$path = openPipelineGetSelectedAsset();
	else if ($type=="component")
		$path = openPipelineGetSelectedComponent();
	else if ($type=="shotComponent")
		$path = openPipelineGetSelectedShotComponent();
	string $name = basename($path,"");
	int $maxWorkshops = openPipelineNumWorkshops($path);
	int $maxVersions = openPipelineNumVersions($path);
	string $wName = capitalizeString(`optionVar -q "op_workshopName"`);
	string $mName = capitalizeString(`optionVar -q "op_masterName"`);
	string $windowExists = `window -exists op_secondaryUI`;
	if($windowExists == 1)
	{
		deleteUI op_secondaryUI;
	}
	window -t ("Archive: "+$name) -w 400 -h 300 op_secondaryUI;
	columnLayout -rs 5 -co "both" 10;
		text -align "left" -font "smallPlainLabelFont" -l ("Archiving the selected "+$type+" will clean up its working directory by \nmoving old "+$wName+" files and old "+$mName+" versions to the Archive \nfolder. The most recent " + $mName + " and "+$wName +" files won't be affected \nand version numbers will remain the same.");
		separator -h 10 -w 370 -style "out";
	rowLayout -numberOfColumns 2 -cw2 190 190 -cl2 "center" "center";
		checkBox -label ("Archive "+$wName+" Files") -v 1 -onc "intField -e -en 1 op_archiveField1" -ofc "intField -e -en 0 op_archiveField1" op_archiveWorkshopsCheckBox;
		checkBox -label ("Archive "+$mName+" Versions") -v 1 -onc "intField -e -en 1 op_archiveField2" -ofc "intField -e -en 0 op_archiveField2" op_archiveVersionsCheckBox;
	setParent..;
	rowLayout -numberOfColumns 4 -cw4 110 80 110 80 -cl4 "left" "left" "left" "left";
	text -l "keep most recent";
	intField  -v 1 -min 1 -max 3 -step 1 -w 40 op_archiveField1;
	text -l "keep most recent";
	intField -v 1 -min 1 -max 3 -step 1 -w 40 op_archiveField2;
	setParent..;
	separator -h 10 -w 370 -style "out";
		button -w 370 -l "Archive"-c ("openPipelineArchiveFolder \""+$path+"\"") -bgc .6 .7 .9;
	setParent..;
	separator -h 10 -w 370 -style "out";
		text -align "left" -font "smallPlainLabelFont" -l ("Retrieving archived files for the current "+$type+" will return them \nto their original working directories.");
		separator -h 10 -w 370 -style "out";
	rowLayout -numberOfColumns 2 -cw2 190 190 -cl2 "center" "center";
		checkBox -label ("Retrieve "+$wName+" Files") -v 0 op_retrieveWorkshopsCheckBox;
		checkBox -label ("Retrieve "+$mName+" Versions") -v 0 op_retrieveVersionsCheckBox;
	setParent..;
	setParent ..;
	separator -h 10 -w 370 -style "out";
		button -w 370 -l "Retrieve"-c ("openPipelineRetrieveFolder \""+$path+"\"") -bgc 1 1 1;
	setParent..;
	separator -h 10 -w 370 -style "out";
	button -w 370 -l "Close" -c "deleteUI op_secondaryUI;";
	window -e -w 400 -h 420 op_secondaryUI;
	showWindow op_secondaryUI;
	if ($maxWorkshops<2)
	{
		checkBox -e -en 0 -v 0 op_archiveWorkshopsCheckBox;
		intField -e -en 0 op_archiveField1;
	}
	else 
		intField -e -max $maxWorkshops op_archiveField1;
	
	if ($maxVersions<2)
	{
		checkBox -e -en 0 -v 0 op_archiveVersionsCheckBox;
		intField -e -en 0 op_archiveField2;
	}
	else 
		intField -e -max $maxVersions op_archiveField2;
}

//###########################################
// Name: openPipelineUpdateWorkingTab
// Description: Updates the optionVar which keeps track of which tab is currently active and refreshes the elements in the tab
// Input: none
// Returns: none
//###########################################
global proc openPipelineUpdateWorkingTab()
{
	int $tab = `tabLayout -q -selectTabIndex op_mainTabLayout`;
	optionVar -iv "op_currTab" $tab;
	if ($tab==1)
		openPipelineUpdateCurrentlyOpen();
	else if ($tab==2)
		openPipelineUpdateAssetTypeList();
	else if ($tab==3)
		openPipelineUpdateSequenceList();
}

//###########################################
// Name: openPipelineSaveNote
// Description: Saves the user-specified note of the currently open item
// Input: none
// Returns: none
//###########################################
global proc openPipelineSaveNote()
{
	string $newText = `scrollField -q -tx op_currNoteField`;
	$newText = `substituteAllString $newText "<" " "`;
	$newText = `substituteAllString $newText ">" " "`;
	$newText = `substituteAllString $newText "\r" "<br>"`;
	string $path = `optionVar -q op_currOpenPath`;
	openPipelineSetDescription($path, $newText);
	button -e -en 0 op_saveNoteButton;
}

//###########################################
// Name: openPipelineClearNote
// Description: Clears the note of the currently open item
// Input: none
// Returns: none
//###########################################
global proc openPipelineClearNote()
{
	scrollField  -e -tx "" op_currNoteField;
	openPipelineSaveNote;
}
//###########################################
// Name: openPipelineLoadAssetHistory
// Description: Updates the "History" section of the Asset Management tab, depending on what item is currently selected
// Input: none
// Returns: none
//###########################################
global proc openPipelineLoadAssetHistory()
{
	string $notePath = `openPipelineGetNotePath "note"`;
    string $assetNoteText = "";
    if (size($notePath))
    {
    	if(`filetest -f $notePath` == 0)
    	{
            openPipelineNoteWriter "missing";
    	}
    
    	string $assetNoteTextArray[] = `openPipelineReadXML $notePath`;
    	$assetNoteText = stringArrayToString($assetNoteTextArray, "");
    }	
	if (`scrollField -q -ex op_commentField`)
		scrollField -edit -text $assetNoteText op_commentField;
}

//###########################################
// Name: openPipelineLoadShotHistory
// Description: Updates the "History" section of the Shot Management tab, depending on what item is currently selected
// Input: none
// Returns: none
//###########################################
global proc openPipelineLoadShotHistory()
{
	string $notePath = `openPipelineGetNotePath "note"`;
  string $shotNoteText = "";
  if (size($notePath))
    {
    	if(`filetest -f $notePath` == 0)
    	{
            openPipelineNoteWriter "missing";
    	}
    
    	string $shotNoteTextArray[] = `openPipelineReadXML $notePath`;
    	$shotNoteText = stringArrayToString($shotNoteTextArray, "");
    }	
	scrollField -edit -text $shotNoteText op_shotCommentField;
}

//###########################################
// Name: openPipelineLoadCurrentHistory
// Description: Updates the "History" section of the Currently Open tab, depending on what item is currently open
// Input: none
// Returns: none
//###########################################
global proc openPipelineLoadCurrentHistory()
{
	string $notePath = `openPipelineGetNotePath "openednote"`;
	string $historyText = "";
	if (size($notePath))
    {
    	if(`filetest -f $notePath` == 0)
    	{
            openPipelineNoteWriter "missing";
    	}
    	string $historyTextArray[] = `openPipelineReadXML $notePath`;
    	$historyText = stringArrayToString($historyTextArray, "");
    }	
	scrollField -edit -text $historyText op_currentAssetNoteField;
}

//###########################################
// Name: openPipelineClearCurrentHistory
// Description: Clears the "History" section of the Currently Open tab
// Input: none
// Returns: none
//###########################################
global proc openPipelineClearCurrentHistory()
{
	scrollField -edit -text "" op_currentAssetNoteField;	
}

//###########################################
// Name: openPipelineTakeSnapshot
// Description: Takes a snapshot and saves it as the currently open scene's preview
// Input: none
// Returns: none
//###########################################
global proc openPipelineTakeSnapshot()
{
	global string $openPipeline_previewFilename;
	global string $openPipeline_scriptPath;
	global string $openPipeline_noPreviewFilename;
	string $path = `optionVar -q "op_currOpenPath"`;
	float $currFrame =  `currentTime -q`;
	int $format = `getAttr "defaultRenderGlobals.imageFormat"`;
	setAttr "defaultRenderGlobals.imageFormat" 8;
	playblast -frame $currFrame -format "image" -cf ($path+$openPipeline_previewFilename) -orn 0 -v 0 -wh 164 105 -p 100;
	setAttr "defaultRenderGlobals.imageFormat" $format;
	string $prevImg = $path+$openPipeline_previewFilename;
	if (`filetest -r $prevImg`)
			image -e -i $prevImg -bgc 0 0 0 op_currPreviewImage;
	else
			image -e -i ($openPipeline_scriptPath+"openPipeline/"+$openPipeline_noPreviewFilename) -bgc 0 0 0 op_currPreviewImage;
}